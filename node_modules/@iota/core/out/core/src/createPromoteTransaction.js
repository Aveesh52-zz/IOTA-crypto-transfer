"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
var Bluebird = require("bluebird");
var errors = require("../../errors");
var guards_1 = require("../../guards");
var types_1 = require("../../types");
var _1 = require("./");
var createPrepareTransfers_1 = require("./createPrepareTransfers");
var createSendTransfer_1 = require("./createSendTransfer");
var defaults = {
    delay: 1000,
    interrupt: false
};
exports.getPromoteTransactionOptions = types_1.getOptionsWithDefaults(defaults);
exports.spammer = function () { return ({
    address: '9'.repeat(81),
    value: 0,
    tag: '9'.repeat(27),
    message: '9'.repeat(27 * 81)
}); };
exports.generateSpam = function (n) {
    if (n === void 0) { n = 1; }
    return new Array(n).map(exports.spammer);
};
/**
 * @method createPromoteTransaction
 *
 * @memberof module:core
 *
 * @param {Provider} provider - Network provider
 *
 * @param {Function} [attachFn] - Optional `AttachToTangle` function to override the
 * [default method]{@link #module_core.attachToTangle}.
 *
 * @return {Function} {@link #module_core.promoteTransaction `promoteTransaction`}
 */
exports.createPromoteTransaction = function (provider, attachFn) {
    var checkConsistency = _1.createCheckConsistency(provider);
    var sendTransfer = createSendTransfer_1.createSendTransfer(provider, attachFn);
    /**
     * Promotes a transaction by adding other transactions (spam by default) on top of it.
     * Will promote `maximum` transfers on top of the current one with `delay` interval. Promotion
     * is interruptable through `interrupt` option.
     *
     * @method promoteTransaction
     *
     * @memberof module:core
     *
     * @param {string} tail
     * @param {int} depth
     * @param {int} minWeightMagnitude
     * @param {array} transfer
     * @param {object} [options]
     * @param {number} [options.delay] - Delay between spam transactions in `ms`
     * @param {boolean|function} [options.interrupt] - Interrupt signal, which can be a function that evaluates
     * to boolean
     * @param {function} [callback]
     *
     * @returns {Promise}
     * @fulfil {Transaction[]}
     * @reject {Error}
     * - `INCONSISTENT SUBTANGLE`: In this case promotion has no effect and reatchment is required.
     * - Fetch error
     */
    return function promoteTransaction(tailTransaction, depth, minWeightMagnitude, spamTransfers, options, callback) {
        var _this = this;
        if (spamTransfers === void 0) { spamTransfers = exports.generateSpam(); }
        // Switch arguments
        if (typeof options === 'undefined') {
            options = {};
        }
        else if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        var _a = exports.getPromoteTransactionOptions(options), delay = _a.delay, interrupt = _a.interrupt;
        var spamTransactions = [];
        var sendTransferOptions = __assign({}, createPrepareTransfers_1.getPrepareTransfersOptions({}), { reference: tailTransaction });
        return Bluebird.resolve(guards_1.validate(guards_1.hashValidator(tailTransaction), guards_1.arrayValidator(guards_1.transferValidator)(spamTransfers)))
            .then(function () { return checkConsistency(tailTransaction, { rejectWithReason: true }); })
            .then(function (consistent) {
            if (!consistent) {
                throw new Error(errors.INCONSISTENT_SUBTANGLE);
            }
            return sendTransfer(spamTransfers[0].address, depth, minWeightMagnitude, spamTransfers, sendTransferOptions);
        })
            .then(function (transactions) { return __awaiter(_this, void 0, void 0, function () {
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = (delay && delay > 0) ||
                            interrupt === true;
                        if (_a) return [3 /*break*/, 3];
                        _b = typeof interrupt === 'function';
                        if (!_b) return [3 /*break*/, 2];
                        return [4 /*yield*/, interrupt()];
                    case 1:
                        _b = (_c.sent());
                        _c.label = 2;
                    case 2:
                        _a = (_b);
                        _c.label = 3;
                    case 3:
                        if (_a) {
                            spamTransactions.push.apply(spamTransactions, transactions);
                            setTimeout(function () {
                                promoteTransaction(tailTransaction, depth, minWeightMagnitude, spamTransfers, {
                                    delay: delay,
                                    interrupt: interrupt
                                });
                            }, delay);
                        }
                        else {
                            return [2 /*return*/, spamTransactions.slice()];
                        }
                        return [2 /*return*/];
                }
            });
        }); })
            .asCallback(typeof arguments[4] === 'function' ? arguments[4] : callback);
    };
};
//# sourceMappingURL=createPromoteTransaction.js.map