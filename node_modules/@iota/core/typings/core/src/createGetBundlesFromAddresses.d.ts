/// <reference types="bluebird" />
import * as Promise from 'bluebird';
import { Callback, Provider, Transaction } from '../../types';
export declare const createGetBundlesFromAddresses: (provider: Provider, caller?: string | undefined) => (addresses: ReadonlyArray<string>, inclusionStates?: boolean | undefined, callback?: Callback<ReadonlyArray<ReadonlyArray<Transaction>>> | undefined) => Promise<ReadonlyArray<ReadonlyArray<Transaction>>>;
export declare const groupTransactionsIntoBundles: (transactions: ReadonlyArray<Transaction>) => ReadonlyArray<ReadonlyArray<Transaction>>;
export declare const getBundleSync: (transactions: ReadonlyArray<Transaction>, transaction: Transaction, bundle?: ReadonlyArray<Transaction>) => ReadonlyArray<Transaction>;
export declare const zip2: <A, B>(as: ReadonlyArray<A>, bs: ReadonlyArray<B>) => [A, B][];
export declare const zipPersistence: (bundles: ReadonlyArray<ReadonlyArray<Transaction>>) => (states: ReadonlyArray<boolean>) => ReadonlyArray<ReadonlyArray<Transaction>>;
export declare const addPersistence: (getLatestInclusion: (transactions: ReadonlyArray<string>, callback?: Callback<ReadonlyArray<boolean>> | undefined) => Promise<ReadonlyArray<boolean>>, bundles: ReadonlyArray<ReadonlyArray<Transaction>>) => Promise<ReadonlyArray<ReadonlyArray<Transaction>>>;
export declare const sortByTimestamp: (bundles: ReadonlyArray<ReadonlyArray<Transaction>>) => ReadonlyArray<Transaction>[];
