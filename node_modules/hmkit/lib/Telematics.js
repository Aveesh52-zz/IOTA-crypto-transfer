'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Response = require('./Responses/Response');

var _Response2 = _interopRequireDefault(_Response);

var _encoding = require('./encoding');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Telematics = function Telematics(hmkit) {
  var _this = this;

  _classCallCheck(this, Telematics);

  this.getNonce = function () {
    return _this.hmkit.apiClient.post(_this.hmkit.api.getUrl() + 'nonces', {
      body: JSON.stringify({
        serial_number: _this.hmkit.clientCertificate.getSerial()
      })
    }).then(function (result) {
      return result.body.nonce;
    }, function () {
      throw new Error('Failed to fetch nonce.');
    });
  };

  this.onTelematicsSendData = function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(issuer, ser, dt) {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _this.hmkit.apiClient.post(_this.hmkit.api.getUrl() + 'telematics_commands', {
                body: JSON.stringify({
                  serial_number: (0, _encoding.uint8ArrayToHex)(new Uint8Array(ser)).toUpperCase(),
                  issuer: (0, _encoding.uint8ArrayToHex)(new Uint8Array(issuer)).toUpperCase(),
                  data: (0, _encoding.byteArrayToBase64)(dt)
                })
              }).then(function (res) {
                return res.body.response_data;
              }, function (err) {
                throw err;
              });

            case 2:
              return _context.abrupt('return', _context.sent);

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, _this);
    }));

    return function (_x, _x2, _x3) {
      return _ref.apply(this, arguments);
    };
  }();

  this.onTelematicsCommandIncoming = function (ser, id, dt) {
    return {
      incomingCommandSerial: (0, _encoding.uint8ArrayToHex)(new Uint8Array(ser)).toUpperCase(),
      incomingCommandId: (0, _encoding.uint8ArrayToHex)(new Uint8Array(id)).toUpperCase(),
      incomingCommandData: new Uint8Array(dt)
    };
  };

  this.sendCommand = function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(serial, data) {
      var nonce, result, response;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return _this.getNonce(serial);

            case 2:
              nonce = _context2.sent;
              _context2.next = 5;
              return _this.hmkit.crypto.sendTelematicsCommand((0, _encoding.hexToUint8Array)(serial).buffer, (0, _encoding.base64ToUint8)(nonce).buffer, (0, _encoding.hexToUint8Array)(data.toString()).buffer, _this.onTelematicsSendData);

            case 5:
              result = _context2.sent;
              _context2.next = 8;
              return _this.hmkit.crypto.telematicsDataReceived((0, _encoding.base64ToUint8)(result).buffer, _this.onTelematicsCommandIncoming);

            case 8:
              response = _context2.sent;

              if (!(response && response.incomingCommandData)) {
                _context2.next = 11;
                break;
              }

              return _context2.abrupt('return', new _Response2.default(response.incomingCommandData));

            case 11:
              throw new Error('Failed to read incoming data.');

            case 12:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, _this);
    }));

    return function (_x4, _x5) {
      return _ref2.apply(this, arguments);
    };
  }();

  this.hmkit = hmkit;
};

exports.default = Telematics;