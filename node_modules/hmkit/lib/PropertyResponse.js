'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _PropertyDecoder = require('./PropertyDecoder');

var _PropertyDecoder2 = _interopRequireDefault(_PropertyDecoder);

var _helpers = require('./helpers');

var _mergeWith = require('lodash/mergeWith');

var _mergeWith2 = _interopRequireDefault(_mergeWith);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PropertyResponse = function () {
  function PropertyResponse() {
    _classCallCheck(this, PropertyResponse);
  }

  _createClass(PropertyResponse, [{
    key: 'parse',

    /*
     * parse()
     *
     * data - incoming response data
     * properties - capability properties that should be extracted from response
     *
     * This parses all configured properties and adds them to "this" by their namespace.
     * Properties that do not have value will be ignored.
     */
    value: function parse(data, properties) {
      var _this = this;

      var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      this.parseProperties(data, config.withUniversalProperties ? this.addUniversalProperties(properties) : properties).forEach(function (parsedProp) {
        (0, _mergeWith2.default)(_this, parsedProp, _this.customiser);
      });
    }
  }, {
    key: 'addUniversalProperties',
    value: function addUniversalProperties(properties) {
      var timestampProperty = new _PropertyDecoder2.default(0xa2, 'date').setDecoder(_helpers.timestampDecoder);

      return properties.concat(timestampProperty);
    }

    // TODO: Improve this temp shieeeet

  }, {
    key: 'customiser',
    value: function customiser(objValue, srcValue) {
      if (Array.isArray(objValue)) {
        return objValue.concat(srcValue);
      }

      return srcValue;
    }

    /*
     * parseProperties()
     *
     * data - incoming response data
     * properties - capability properties that should be extracted from response
     *
     * Parses data and sets decoded values for each property that is specified in response.
     * Returns properties with values. If property data was not in the response data then property will not have a value.
     *
     * TODO: Add data length validation and individual property length validation
     * TODO: Maybe split this function into more readable chunks. This function does too much at the moment.
     */

  }, {
    key: 'parseProperties',
    value: function parseProperties(data, properties) {
      var parsedProperties = [];
      var propertiesData = [].concat(_toConsumableArray(data.slice(3, data.length)));

      if (propertiesData.length > 0) {
        var counter = 0;

        while (counter < propertiesData.length) {
          var identifier = propertiesData[counter];
          var propertyComponentsLength = (0, _helpers.bytesSum)(propertiesData.slice(counter + 1, counter + 3));
          var propertyComponentsData = propertiesData.slice(counter + 3, counter + 3 + propertyComponentsLength);

          var property = this.findProperty(identifier, properties);

          if (!!property) {
            var componentBytes = (0, _helpers.parsePropertyComponents)(propertyComponentsData);

            var parsedProperty = property.parseComponents(componentBytes.data, componentBytes.time, componentBytes.error);

            if (parsedProperty !== undefined) parsedProperties.push(parsedProperty);
          }

          counter += 3 + propertyComponentsLength;
        }
      }

      return parsedProperties;
    }

    /*
     * findProperty()
     *
     * identifier - property identifier
     * properties - list of properties where to search from
     *
     * Simple array find helper to keep the code cleaner.
     * Returns property with correct identifier or null if property was not found.
     * If property is not found, parent function should definitely throw/show error.
     */

  }, {
    key: 'findProperty',
    value: function findProperty(identifier, properties) {
      return properties.find(function (property) {
        return property.identifier === identifier;
      });
    }
  }]);

  return PropertyResponse;
}();

exports.default = PropertyResponse;