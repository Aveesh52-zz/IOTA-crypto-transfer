'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _PropertyResponse2 = require('../PropertyResponse');

var _PropertyResponse3 = _interopRequireDefault(_PropertyResponse2);

var _PropertyDecoder = require('../PropertyDecoder');

var _PropertyDecoder2 = _interopRequireDefault(_PropertyDecoder);

var _OptionalPropertyDecoder = require('../OptionalPropertyDecoder');

var _OptionalPropertyDecoder2 = _interopRequireDefault(_OptionalPropertyDecoder);

var _encoding = require('../encoding');

var _helpers = require('../helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ChassisSettingsResponse = function (_PropertyResponse) {
  _inherits(ChassisSettingsResponse, _PropertyResponse);

  /**
   * @property {String} drivingMode (string) Driving mode
   * @property {String} sportChrono (string) Sport chrono
   * @property {Array} currentSpringRates (array) Current spring rates ([{ axle: (string 'front_axle|rear_axle'), springRate: (number) }])
   * @property {Array} maximumSpringRates (array) Maximum spring rates ([{ axle: (string 'front_axle|rear_axle'), springRate: (number) }])
   * @property {Array} minimumSpringRates (array) Minimum spring rates ([{ axle: (string 'front_axle|rear_axle'), springRate: (number) }])
   * @property {Number} currentChassisPosition (number) Current chassis position
   * @property {Number} maximumChassisPosition (number) Maximum chassis position
   * @property {Number} minimumChassisPosition (number) Minimum chassis position
   *
   * @example ChassisSettingsResponse
    {
      drivingMode: { value: 'sport_plus' },
      sportChrono: { value: 'inactive' },
      currentSpringRates: [{
        value: {
          axle: 'front_axle',
          springRate: 21
        }
      }, {
        value: {
          axle: 'rear_axle',
          springRate: 25
        }
      }],
      maximumSpringRates: [{
        value: {
          axle: 'front_axle',
          springRate: 37
        }
      }, {
        value: {
          axle: 'rear_axle',
          springRate: 37
        }
      }],
      minimumSpringRates: [{
        value: {
          axle: 'front_axle',
          springRate: 17
        }
      }, {
        value: {
          axle: 'rear_axle',
          springRate: 17
        }
      }],
      currentChassisPosition: { value: 26 },
      maximumChassisPosition: { value: 55 },
      minimumChassisPosition: { value: -28 },
    }
   */
  function ChassisSettingsResponse(data, config) {
    _classCallCheck(this, ChassisSettingsResponse);

    var _this = _possibleConstructorReturn(this, (ChassisSettingsResponse.__proto__ || Object.getPrototypeOf(ChassisSettingsResponse)).call(this));

    var properties = [new _PropertyDecoder2.default(0x01, 'drivingMode').setDecoder((0, _helpers.switchDecoder)({
      0x00: 'regular',
      0x01: 'eco',
      0x02: 'sport',
      0x03: 'sport_plus',
      0x04: 'eco_plus'
    })), new _PropertyDecoder2.default(0x02, 'sportChrono').setDecoder((0, _helpers.switchDecoder)({
      0x00: 'inactive',
      0x01: 'active'
    })), new _PropertyDecoder2.default(0x05, 'currentSpringRates').setOptionalSubProperties('axle', [new _OptionalPropertyDecoder2.default(0x00, 'front_axle').setDecoder(_this.axleDataDecoder('springRate')), new _OptionalPropertyDecoder2.default(0x01, 'rear_axle').setDecoder(_this.axleDataDecoder('springRate'))]), new _PropertyDecoder2.default(0x06, 'maximumSpringRates').setOptionalSubProperties('axle', [new _OptionalPropertyDecoder2.default(0x00, 'front_axle').setDecoder(_this.axleDataDecoder('springRate')), new _OptionalPropertyDecoder2.default(0x01, 'rear_axle').setDecoder(_this.axleDataDecoder('springRate'))]), new _PropertyDecoder2.default(0x07, 'minimumSpringRates').setOptionalSubProperties('axle', [new _OptionalPropertyDecoder2.default(0x00, 'front_axle').setDecoder(_this.axleDataDecoder('springRate')), new _OptionalPropertyDecoder2.default(0x01, 'rear_axle').setDecoder(_this.axleDataDecoder('springRate'))]), new _PropertyDecoder2.default(0x08, 'currentChassisPosition').setDecoder(function (bytes) {
      return (0, _encoding.uint8toInt8)(bytes[0]);
    }), new _PropertyDecoder2.default(0x09, 'maximumChassisPosition').setDecoder(function (bytes) {
      return (0, _encoding.uint8toInt8)(bytes[0]);
    }), new _PropertyDecoder2.default(0x0a, 'minimumChassisPosition').setDecoder(function (bytes) {
      return (0, _encoding.uint8toInt8)(bytes[0]);
    })];

    _this.parse(data, properties, config);
    return _this;
  }

  _createClass(ChassisSettingsResponse, [{
    key: 'axleDataDecoder',
    value: function axleDataDecoder(namespace) {
      return function (bytes) {
        return _defineProperty({}, namespace, (0, _encoding.uint8toInt8)(bytes[0]));
      };
    }
  }]);

  return ChassisSettingsResponse;
}(_PropertyResponse3.default);

ChassisSettingsResponse.identifier = [0x00, 0x53];
exports.default = ChassisSettingsResponse;