'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _PropertyResponse2 = require('../PropertyResponse');

var _PropertyResponse3 = _interopRequireDefault(_PropertyResponse2);

var _PropertyDecoder = require('../PropertyDecoder');

var _PropertyDecoder2 = _interopRequireDefault(_PropertyDecoder);

var _helpers = require('../helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PowerTakeOffResponse = function (_PropertyResponse) {
  _inherits(PowerTakeOffResponse, _PropertyResponse);

  /**
   * @property {String} powerTakeoff (string 'inactive|active') Power Take-Off
   * @property {String} powerTakeoffEngaged (string 'not_engaged|engaged') Power Take-Off engaged
   *
   * @example PowerTakeOffResponse
    {
      powerTakeoff: {
        value: 'inactive',
      },
      powerTakeoffEngaged: {
        value: 'not_engaged',
      },
    }
   */
  function PowerTakeOffResponse(data, config) {
    _classCallCheck(this, PowerTakeOffResponse);

    var _this = _possibleConstructorReturn(this, (PowerTakeOffResponse.__proto__ || Object.getPrototypeOf(PowerTakeOffResponse)).call(this));

    var properties = [new _PropertyDecoder2.default(0x01, 'powerTakeoff').setDecoder((0, _helpers.switchDecoder)({
      0x00: 'inactive',
      0x01: 'active'
    })), new _PropertyDecoder2.default(0x02, 'powerTakeoffEngaged').setDecoder((0, _helpers.switchDecoder)({
      0x00: 'not_engaged',
      0x01: 'engaged'
    }))];

    _this.parse(data, properties, config);
    return _this;
  }

  return PowerTakeOffResponse;
}(_PropertyResponse3.default);

PowerTakeOffResponse.identifier = [0x00, 0x65];
exports.default = PowerTakeOffResponse;