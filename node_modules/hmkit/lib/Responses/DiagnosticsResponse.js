'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _PropertyResponse2 = require('../PropertyResponse');

var _PropertyResponse3 = _interopRequireDefault(_PropertyResponse2);

var _PropertyDecoder = require('../PropertyDecoder');

var _PropertyDecoder2 = _interopRequireDefault(_PropertyDecoder);

var _encoding = require('../encoding');

var _helpers = require('../helpers');

var _OptionalPropertyDecoder = require('../OptionalPropertyDecoder');

var _OptionalPropertyDecoder2 = _interopRequireDefault(_OptionalPropertyDecoder);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DiagnosticsResponse = function (_PropertyResponse) {
  _inherits(DiagnosticsResponse, _PropertyResponse);

  /**
   * @property {Number} mileage (number) The car mileage (odometer) in km
   * @property {Number} engineOilTemperature (number) Engine oil temperature in Celsius, whereas can be negative
   * @property {Number} speed (number) The car speed on km/h, whereas can be negative
   * @property {Number} engineRPM (number) RPM of the Engine
   * @property {Number} fuelLevel (number) Fuel level percentage between 0-1
   * @property {Number} estimatedRange (number) Estimated range
   * @property {String} washerFluidLevel (string) Washer fluid level
   * @property {Number} batteryVoltage (number) Battery voltage per IEEE 754 formatting
   * @property {Number} adblueLevel (number) AdBlue level in liters formatted in 4-bytes per IEEE 754
   * @property {Number} distanceSinceReset (number) The distance driven in km since reset
   * @property {Number} distanceSinceStart (number) The distance driven in km since trip start
   * @property {Number} fuelVolume (number) The fuel volume measured in liters
   * @property {String} antiLockBraking (string) Anti-lock braking system (ABS)
   * @property {Number} engineCoolantTemperature (number) Engine coolant temperature in Celsius, whereas can be negative
   * @property {Number} engineTotalOperatingHours (number) The accumulated time of engine operation per IEEE 754 formatting
   * @property {Number} engineTotalFuelConsumption (number) The accumulated lifespan fuel consumption in liters per IEEE 754 formatting
   * @property {String} brakeFluidLevel (string) Brake fluid level
   * @property {Number} engineTorque (number) Current engine torque percentage between 0-1
   * @property {Number} engineLoad (number) Current engine load percentage between 0-1
   * @property {Number} wheelBasedSpeed (number) The vehicle speed in km/h measured at the wheel base, whereas can be negative
   * @property {Number} batteryLevel (number) Battery level 0..1 (0 = 0%, 1 = 100%)
   * @property {Array} checkControlMessages (array) Check control message ([{ id: (number), remainingMinutes: (number), text: (string), status: (string) }])
   * @property {Object} tirePressures (Object) Tire pressures [{ location: (string), pressure: (number) }]
   * @property {Object} tireTemperatures (Object) Tire pressures [{ location: (string), temperature: (number) }]
   * @property {Object} wheelRpms (Object) Tire pressures [{ location: (string), rpm: (number) }]
   * @property {Array} troubleCodes (array) Trouble codes [{ occurences: (number), id: (string), ecuId: (string), status: (string) }]
   * @property {Number} mileageMeters (number) Mileage in meters
   *
   * @example DiagnosticsResponse
    {
      mileage: { value: 3000 },
      engineOilTemperature: { value: 18 },
      speed: { value: 0 },
      engineRPM: { value: 0 },
      fuelLevel: { value: 0.8 },
      estimatedRange: { value: 200 },
      washerFluidLevel: { value: 'low' },
      batteryVoltage: { value: 12 },
      adblueLevel: { value: 0 },
      distanceSinceReset: { value: 0 },
      distanceSinceStart: { value: 0 },
      fuelVolume: { value: 0 },
      antiLockBraking: { value: 'inactive' },
      engineCoolantTemperature: { value: 23 },
      engineTotalOperatingHours: { value: 24 },
      engineTotalFuelConsumption: { value: 600 },
      brakeFluidLevel: { value: 'low' },
      engineTorque: { value: 0.2 },
      engineLoad: { value: 0.1 },
      wheelBasedSpeed: { value: 0 },
      batteryLevel: { value: 0.8 },
      checkControlMessages: [{
        value: {
          id: 10,
          remainingMinutes: 0,
          text: '',
          status: ''
        }
      }],
      tirePressures: [{
        value: {
          location: 'front_left',
          pressure: 2.3
        }
      }, {
        value: {
          location: 'front_right',
          pressure: 2.3
        }
      }, {
        value: {
          location: 'rear_right',
          pressure: 2.3
        }
      }, {
        value: {
          location: 'rear_left',
          pressure: 2.3
        }
      }],
      tireTemperatures: [{
        value: {
          location: 'front_left',
          temperature: 40
        }
      }, {
        value: {
          location: 'front_right',
          temperature: 40
        }
      }, {
        value: {
          location: 'rear_right',
          temperature: 40
        }
      }, {
        value: {
          location: 'rear_left',
          temperature: 40
        }
      }],
      wheelRpms: [{
        value: {
          location: 'front_left',
          rpm: 0
        }
      }, {
        value: {
          location: 'front_right',
          rpm: 0
        }
      }, {
        value: {
          location: 'rear_right',
          rpm: 0
        }
      }, {
        value: {
          location: 'rear_left',
          rpm: 0
        }
      }],
      troubleCodes: [{
        value: {
          occurences: 0,
          id: '',
          ecuId: '',
          status: ''
        }
      }],
      mileageMeters: { value: 3000 },
    }
   */
  function DiagnosticsResponse(data, config) {
    _classCallCheck(this, DiagnosticsResponse);

    var _this = _possibleConstructorReturn(this, (DiagnosticsResponse.__proto__ || Object.getPrototypeOf(DiagnosticsResponse)).call(this));

    var properties = [new _PropertyDecoder2.default(0x01, 'mileage').setDecoder(_helpers.bytesSum), new _PropertyDecoder2.default(0x02, 'engineOilTemperature').setDecoder(_helpers.bytesSum), new _PropertyDecoder2.default(0x03, 'speed').setDecoder(_helpers.bytesSum), new _PropertyDecoder2.default(0x04, 'engineRPM').setDecoder(_helpers.bytesSum), new _PropertyDecoder2.default(0x05, 'fuelLevel').setDecoder(_helpers.progressDecoder), new _PropertyDecoder2.default(0x06, 'estimatedRange').setDecoder(_helpers.bytesSum), new _PropertyDecoder2.default(0x09, 'washerFluidLevel').setDecoder((0, _helpers.switchDecoder)({
      0x00: 'low',
      0x01: 'filled'
    })), new _PropertyDecoder2.default(0x0b, 'batteryVoltage').setDecoder((0, _helpers.getRoundedIeee754ToBase10)(2)), new _PropertyDecoder2.default(0x0c, 'adblueLevel').setDecoder((0, _helpers.getRoundedIeee754ToBase10)(2)), new _PropertyDecoder2.default(0x0d, 'distanceSinceReset').setDecoder(_helpers.bytesSum), new _PropertyDecoder2.default(0x0e, 'distanceSinceStart').setDecoder(_helpers.bytesSum), new _PropertyDecoder2.default(0x0f, 'fuelVolume').setDecoder((0, _helpers.getRoundedIeee754ToBase10)(2)), new _PropertyDecoder2.default(0x10, 'antiLockBraking').setDecoder((0, _helpers.switchDecoder)({
      0x00: 'inactive',
      0x01: 'active'
    })), new _PropertyDecoder2.default(0x11, 'engineCoolantTemperature').setDecoder(_helpers.uint8Decoder), new _PropertyDecoder2.default(0x12, 'engineTotalOperatingHours').setDecoder((0, _helpers.getRoundedIeee754ToBase10)(2)), new _PropertyDecoder2.default(0x13, 'engineTotalFuelConsumption').setDecoder((0, _helpers.getRoundedIeee754ToBase10)(2)), new _PropertyDecoder2.default(0x14, 'brakeFluidLevel').setDecoder((0, _helpers.switchDecoder)({
      0x00: 'low',
      0x01: 'filled'
    })), new _PropertyDecoder2.default(0x15, 'engineTorque').setDecoder(_helpers.progressDecoder), new _PropertyDecoder2.default(0x16, 'engineLoad').setDecoder(_helpers.progressDecoder), new _PropertyDecoder2.default(0x17, 'wheelBasedSpeed').setDecoder(_helpers.bytesSum), new _PropertyDecoder2.default(0x18, 'batteryLevel').setDecoder(_helpers.progressDecoder), new _PropertyDecoder2.default(0x19, 'checkControlMessages').setDecoder(_this.checkControlMessagesDecoder).array(), new _PropertyDecoder2.default(0x1a, 'tirePressures').setOptionalSubProperties('location', [new _OptionalPropertyDecoder2.default(0x00, 'front_left').setDecoder(_this.pressureDecoder), new _OptionalPropertyDecoder2.default(0x01, 'front_right').setDecoder(_this.pressureDecoder), new _OptionalPropertyDecoder2.default(0x02, 'rear_right').setDecoder(_this.pressureDecoder), new _OptionalPropertyDecoder2.default(0x03, 'rear_left').setDecoder(_this.pressureDecoder)]), new _PropertyDecoder2.default(0x1b, 'tireTemperatures').setOptionalSubProperties('location', [new _OptionalPropertyDecoder2.default(0x00, 'front_left').setDecoder(_this.temperatureDecoder), new _OptionalPropertyDecoder2.default(0x01, 'front_right').setDecoder(_this.temperatureDecoder), new _OptionalPropertyDecoder2.default(0x02, 'rear_right').setDecoder(_this.temperatureDecoder), new _OptionalPropertyDecoder2.default(0x03, 'rear_left').setDecoder(_this.temperatureDecoder)]), new _PropertyDecoder2.default(0x1c, 'wheelRpms').setOptionalSubProperties('location', [new _OptionalPropertyDecoder2.default(0x00, 'front_left').setDecoder(_this.rpmDecoder), new _OptionalPropertyDecoder2.default(0x01, 'front_right').setDecoder(_this.rpmDecoder), new _OptionalPropertyDecoder2.default(0x02, 'rear_right').setDecoder(_this.rpmDecoder), new _OptionalPropertyDecoder2.default(0x03, 'rear_left').setDecoder(_this.rpmDecoder)]), new _PropertyDecoder2.default(0x1d, 'troubleCodes').setDecoder(_this.troubleCodesDecoder).array(), new _PropertyDecoder2.default(0x1e, 'mileageMeters').setDecoder(_helpers.bytesSum)];

    _this.parse(data, properties, config);
    return _this;
  }

  _createClass(DiagnosticsResponse, [{
    key: 'pressureDecoder',
    value: function pressureDecoder(bytes) {
      return {
        pressure: (0, _helpers.getRoundedIeee754ToBase10)(2)(bytes)
      };
    }
  }, {
    key: 'temperatureDecoder',
    value: function temperatureDecoder(bytes) {
      return {
        temperature: (0, _helpers.getRoundedIeee754ToBase10)(2)(bytes)
      };
    }
  }, {
    key: 'rpmDecoder',
    value: function rpmDecoder(bytes) {
      return {
        rpm: (0, _helpers.bytesSum)(bytes)
      };
    }
  }, {
    key: 'checkControlMessagesDecoder',
    value: function checkControlMessagesDecoder(bytes) {
      var textLength = (0, _helpers.bytesSum)(bytes.slice(6, 8));
      var text = (0, _encoding.bytesToString)(bytes.slice(8, 8 + textLength));
      var statusLength = bytes[9 + textLength];
      var status = (0, _encoding.bytesToString)(bytes.slice(9 + textLength, 10 + textLength + statusLength));

      return {
        id: (0, _helpers.bytesSum)(bytes.slice(0, 2)),
        remainingMinutes: (0, _helpers.bytesSum)(bytes.slice(2, 6)),
        text: text,
        status: status
      };
    }
  }, {
    key: 'troubleCodesDecoder',
    value: function troubleCodesDecoder(bytes) {
      var idLength = bytes[1];
      var ecuIdLength = bytes[2 + idLength];
      var statusLength = bytes[3 + idLength + ecuIdLength];

      return {
        occurences: bytes[0],
        id: (0, _encoding.bytesToString)(bytes.slice(2, 2 + idLength)),
        ecuId: (0, _encoding.bytesToString)(bytes.slice(3 + idLength, 3 + idLength + ecuIdLength)),
        status: (0, _encoding.bytesToString)(bytes.slice(4 + idLength + ecuIdLength, 4 + idLength + ecuIdLength + statusLength))
      };
    }
  }]);

  return DiagnosticsResponse;
}(_PropertyResponse3.default);

DiagnosticsResponse.identifier = [0x00, 0x33];
exports.default = DiagnosticsResponse;