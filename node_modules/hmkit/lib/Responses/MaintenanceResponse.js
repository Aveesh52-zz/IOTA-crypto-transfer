'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _PropertyResponse2 = require('../PropertyResponse');

var _PropertyResponse3 = _interopRequireDefault(_PropertyResponse2);

var _PropertyDecoder = require('../PropertyDecoder');

var _PropertyDecoder2 = _interopRequireDefault(_PropertyDecoder);

var _helpers = require('../helpers');

var _encoding = require('../encoding');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MaintenanceResponse = function (_PropertyResponse) {
  _inherits(MaintenanceResponse, _PropertyResponse);

  /**
   * @property {Number} daysToNextService (number) Number of days until next servicing of the car, whereas negative is overdue
   * @property {Number} kilometersToNextService (number) Amount of kilometers until next servicing of the car
   * @property {Number} cbsReportsCount (number) The number of CBS reports
   * @property {Number} monthsToExhaustInspection (number) Number of months until exhaust inspection
   * @property {String} teleserviceAvailability (string: 'pending|idle|successful|error') Teleservice availability
   * @property {Number} serviceDistanceThreshold (number) Distance threshold for Service
   * @property {Number} serviceTimeThreshold (number) Time threshold, in weeks, for Service
   * @property {Date} automaticTeleserviceCallDate (date) Automatic teleservice call date
   * @property {Date} teleserviceBatteryCallDate (date) Teleservice battery call date
   * @property {Date} nextInspectionDate (date) Next inspection date
   * @property {Array} conditionBasedServices (Array) Condition based services ([{ year: (number), month: (number), cbsIdentifier: (number), dueStatus: (string: 'ok|pending|overdue'), cbsText: (string), description: (string) }])
   * @property {Date} brakeFluidChangeDate (Date) Brake fluid change date
   *
   * @example MaintenanceResponse
    {
      daysToNextService: {
        value: 400,
      },
      kilometersToNextService: {
        value: 30000,
      },
      cbsReportsCount: {
        value: 0,
      },
      monthsToExhaustInspection: {
        value: 0,
      },
      teleserviceAvailability: {
        value: 'pending',
      },
      serviceDistanceThreshold: {
        value: 0,
      },
      serviceTimeThreshold: {
        value: 0,
      },
      automaticTeleserviceCallDate: {
        value: '2018-10-22T12:10:33.769Z',
      },
      teleserviceBatteryCallDate: {
        value: '2018-10-22T12:10:33.769Z',
      },
      nextInspectionDate: {
        value: '2018-10-22T12:10:33.769Z',
      },
      conditionBasedServices: [{
        value: {
          year: 2018,
          month: 8,
          cbsIdentifier: 123,
          dueStatus: 'ok',
          cbsText: '',
          description: '',
        },
      }],
      brakeFluidChangeDate: {
        value: '2018-10-22T12:10:33.769Z',
      },
    }
   */
  function MaintenanceResponse(data, config) {
    _classCallCheck(this, MaintenanceResponse);

    var _this = _possibleConstructorReturn(this, (MaintenanceResponse.__proto__ || Object.getPrototypeOf(MaintenanceResponse)).call(this));

    var properties = [new _PropertyDecoder2.default(0x01, 'daysToNextService').setDecoder(_helpers.bytesSum), new _PropertyDecoder2.default(0x02, 'kilometersToNextService').setDecoder(_helpers.bytesSum), new _PropertyDecoder2.default(0x03, 'cbsReportsCount').setDecoder(_helpers.bytesSum), new _PropertyDecoder2.default(0x04, 'monthsToExhaustInspection').setDecoder(_helpers.bytesSum), new _PropertyDecoder2.default(0x05, 'teleserviceAvailability').setDecoder((0, _helpers.switchDecoder)({
      0x00: 'pending',
      0x01: 'idle',
      0x02: 'succesful',
      0x03: 'error'
    })), new _PropertyDecoder2.default(0x06, 'serviceDistanceThreshold').setDecoder(_helpers.bytesSum), new _PropertyDecoder2.default(0x07, 'serviceTimeThreshold').setDecoder(_helpers.bytesSum), new _PropertyDecoder2.default(0x08, 'automaticTeleserviceCallDate').setDecoder(_helpers.timestampDecoder), new _PropertyDecoder2.default(0x09, 'teleserviceBatteryCallDate').setDecoder(_helpers.timestampDecoder), new _PropertyDecoder2.default(0x0a, 'nextInspectionDate').setDecoder(_helpers.timestampDecoder), new _PropertyDecoder2.default(0x0b, 'conditionBasedServices').setDecoder(_this.conditionBasedServicesDecoder).array(), new _PropertyDecoder2.default(0x0c, 'brakeFluidChangeDate').setDecoder(_helpers.timestampDecoder)];

    _this.parse(data, properties, config);
    return _this;
  }

  _createClass(MaintenanceResponse, [{
    key: 'conditionBasedServicesDecoder',
    value: function conditionBasedServicesDecoder(bytes) {
      var cbsTextLength = (0, _helpers.bytesSum)(bytes.slice(5, 7));
      var cbsText = (0, _encoding.bytesToString)(bytes.slice(7, 7 + cbsTextLength));
      var descriptionLength = (0, _helpers.bytesSum)(bytes.slice(7 + cbsTextLength, 9 + cbsTextLength));
      var description = (0, _encoding.bytesToString)(bytes.slice(9 + cbsTextLength, 9 + cbsTextLength + descriptionLength));

      return {
        year: bytes[0] + 2000,
        month: bytes[1],
        cbsIdentifier: (0, _helpers.bytesSum)(bytes.slice(2, 4)),
        dueStatus: (0, _helpers.switchDecoder)({
          0x00: 'ok',
          0x01: 'pending',
          0x02: 'overdue'
        })([bytes[4]]),
        cbsText: cbsText,
        description: description
      };
    }
  }]);

  return MaintenanceResponse;
}(_PropertyResponse3.default);

MaintenanceResponse.identifier = [0x00, 0x34];
exports.default = MaintenanceResponse;