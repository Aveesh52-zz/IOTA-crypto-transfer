'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _PropertyResponse2 = require('../PropertyResponse');

var _PropertyResponse3 = _interopRequireDefault(_PropertyResponse2);

var _PropertyDecoder = require('../PropertyDecoder');

var _PropertyDecoder2 = _interopRequireDefault(_PropertyDecoder);

var _encoding = require('../encoding');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FirmwareVersionResponse = function (_PropertyResponse) {
  _inherits(FirmwareVersionResponse, _PropertyResponse);

  /**
   * @property {Object} carSDKVersion (object `{versionMajor: (number), versionMinor: (string), versionPatch: (string),}`) Car SDK version
   * @property {String} carSDKBuildName (string) Car SDK build name
   * @property {String} applicationVersion 	(string) Application version
   *
   * @example FirmwareVersionResponse
    {
      carSDKVersion: {
        value: {
          versionMajor: 2,
          versionMinor: 2,
          versionPatch: 5
        },
      },
      carSDKBuildName: {
        value: 'hm-emulator'
      },
      applicationVersion: {
        value: 'v2.2.5-development'
      },
    }
   */
  function FirmwareVersionResponse(data, config) {
    _classCallCheck(this, FirmwareVersionResponse);

    var _this = _possibleConstructorReturn(this, (FirmwareVersionResponse.__proto__ || Object.getPrototypeOf(FirmwareVersionResponse)).call(this));

    var properties = [new _PropertyDecoder2.default(0x01, 'carSDKVersion').setDecoder(_this.carSDKVersionDecoder), new _PropertyDecoder2.default(0x02, 'carSDKBuildName').setDecoder(_encoding.bytesToString), new _PropertyDecoder2.default(0x03, 'applicationVersion').setDecoder(_encoding.bytesToString)];

    _this.parse(data, properties, config);
    return _this;
  }

  _createClass(FirmwareVersionResponse, [{
    key: 'carSDKVersionDecoder',
    value: function carSDKVersionDecoder(bytes) {
      return {
        versionMajor: bytes[0],
        versionMinor: bytes[1],
        versionPatch: bytes[2]
      };
    }
  }]);

  return FirmwareVersionResponse;
}(_PropertyResponse3.default);

FirmwareVersionResponse.identifier = [0x00, 0x03];
exports.default = FirmwareVersionResponse;