'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Command = require('./Command');

var _Command2 = _interopRequireDefault(_Command);

var _BaseCommand2 = require('./BaseCommand');

var _BaseCommand3 = _interopRequireDefault(_BaseCommand2);

var _validate = require('../validate');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CruiseControlCommand = function (_BaseCommand) {
  _inherits(CruiseControlCommand, _BaseCommand);

  function CruiseControlCommand() {
    _classCallCheck(this, CruiseControlCommand);

    return _possibleConstructorReturn(this, (CruiseControlCommand.__proto__ || Object.getPrototypeOf(CruiseControlCommand)).apply(this, arguments));
  }

  _createClass(CruiseControlCommand, null, [{
    key: 'getState',

    /**
     * @function getState
     */
    value: function getState() {
      return new _Command2.default([0x00, 0x62, 0x00]);
    }

    /**
     * @function activateCruiseControl
     *
     * @property {Number} targetSpeed (number) The target speed in km/h
     */

  }, {
    key: 'activateCruiseControl',
    value: function activateCruiseControl(targetSpeed) {
      (0, _validate.validate)([{
        value: targetSpeed,
        name: 'Target speed',
        condition: _validate.Joi.number()
      }]);

      var targetSpeedBytes = targetSpeed !== null && targetSpeed !== undefined ? this.buildProperty(0x02, targetSpeed) : [];

      return new _Command2.default([0x00, 0x62, 0x12].concat(_toConsumableArray(this.buildProperty(0x01, 0x01)), _toConsumableArray(targetSpeedBytes)));
    }

    /**
     * @function deactivateCruiseControl
     */

  }, {
    key: 'deactivateCruiseControl',
    value: function deactivateCruiseControl() {
      return new _Command2.default([0x00, 0x62, 0x12].concat(_toConsumableArray(this.buildProperty(0x01, 0x00))));
    }
  }]);

  return CruiseControlCommand;
}(_BaseCommand3.default);

exports.default = CruiseControlCommand;