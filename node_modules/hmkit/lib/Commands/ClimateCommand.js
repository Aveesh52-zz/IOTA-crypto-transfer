'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Command = require('./Command');

var _Command2 = _interopRequireDefault(_Command);

var _BaseCommand2 = require('./BaseCommand');

var _BaseCommand3 = _interopRequireDefault(_BaseCommand2);

var _encoding = require('../encoding');

var _validate = require('../validate');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ClimateCommand = function (_BaseCommand) {
  _inherits(ClimateCommand, _BaseCommand);

  function ClimateCommand() {
    _classCallCheck(this, ClimateCommand);

    return _possibleConstructorReturn(this, (ClimateCommand.__proto__ || Object.getPrototypeOf(ClimateCommand)).apply(this, arguments));
  }

  _createClass(ClimateCommand, null, [{
    key: 'getState',

    /**
     * @function getState
     */
    value: function getState() {
      return new _Command2.default([0x00, 0x24, 0x00]);
    }

    /**
     * @function setWeekdayStartingTimes
     *
     * @property {Array} weekdayStartingTimes (array) HVAC weekway starting times ([{ weekday: (string: 'monday|tuesday|wednesday|thursday|friday|satuday|sunday|automatic'), hour: (number), minute: (number) }])
     */

  }, {
    key: 'setWeekdayStartingTimes',
    value: function setWeekdayStartingTimes(weekdayStartingTimes) {
      var _this2 = this;

      var weekdayStartingTimesBytes = weekdayStartingTimes.reduce(function (weekdayBytes, _ref) {
        var weekday = _ref.weekday,
            hour = _ref.hour,
            minute = _ref.minute;
        return weekdayBytes.concat(_this2.buildProperty(0x01, [_this2.getWeekdayByte(weekday), hour, minute]));
      }, []);

      return new _Command2.default([0x00, 0x24, 0x12].concat(_toConsumableArray(weekdayStartingTimesBytes)));
    }

    /**
     * @function startHvac
     */

  }, {
    key: 'startHvac',
    value: function startHvac() {
      return new _Command2.default([0x00, 0x24, 0x13].concat(_toConsumableArray(this.buildProperty(0x01, 0x01))));
    }

    /**
     * @function stopHvac
     */

  }, {
    key: 'stopHvac',
    value: function stopHvac() {
      return new _Command2.default([0x00, 0x24, 0x13].concat(_toConsumableArray(this.buildProperty(0x01, 0x00))));
    }

    /**
     * @function startDefogging
     */

  }, {
    key: 'startDefogging',
    value: function startDefogging() {
      return new _Command2.default([0x00, 0x24, 0x14].concat(_toConsumableArray(this.buildProperty(0x01, 0x01))));
    }

    /**
     * @function stopDefogging
     */

  }, {
    key: 'stopDefogging',
    value: function stopDefogging() {
      return new _Command2.default([0x00, 0x24, 0x14].concat(_toConsumableArray(this.buildProperty(0x01, 0x00))));
    }

    /**
     * @function startDefrosting
     */

  }, {
    key: 'startDefrosting',
    value: function startDefrosting() {
      return new _Command2.default([0x00, 0x24, 0x15].concat(_toConsumableArray(this.buildProperty(0x01, 0x01))));
    }

    /**
     * @function stopDefrosting
     */

  }, {
    key: 'stopDefrosting',
    value: function stopDefrosting() {
      return new _Command2.default([0x00, 0x24, 0x15].concat(_toConsumableArray(this.buildProperty(0x01, 0x00))));
    }

    /**
     * @function startIonising
     */

  }, {
    key: 'startIonising',
    value: function startIonising() {
      return new _Command2.default([0x00, 0x24, 0x16].concat(_toConsumableArray(this.buildProperty(0x01, 0x01))));
    }

    /**
     * @function stopIonising
     */

  }, {
    key: 'stopIonising',
    value: function stopIonising() {
      return new _Command2.default([0x00, 0x24, 0x16].concat(_toConsumableArray(this.buildProperty(0x01, 0x00))));
    }

    /**
     * @function setTemperatureSettings
     *
     * @property {Number} driverTemperatureSetting (number) Driver temperature setting in ‎°C
     * @property {Number} passengerTemperatureSetting (number) Passenger temperature setting in ‎°C
     * @property {Number} rearTemperatureSetting (number) Rear temperature setting in ‎°C
     */

  }, {
    key: 'setTemperatureSettings',
    value: function setTemperatureSettings(driverTemperatureSetting, passengerTemperatureSetting, rearTemperatureSetting) {
      (0, _validate.validate)([{
        value: driverTemperatureSetting,
        name: 'Driver temperature setting',
        condition: _validate.Joi.number().required()
      }, {
        value: passengerTemperatureSetting,
        name: 'Passenger temperature setting',
        condition: _validate.Joi.number().required()
      }, {
        value: rearTemperatureSetting,
        name: 'Rear temperature setting',
        condition: _validate.Joi.number().required()
      }]);

      return new _Command2.default([0x00, 0x24, 0x17].concat(_toConsumableArray(this.buildProperty(0x01, (0, _encoding.base10ToIeee754)(driverTemperatureSetting))), _toConsumableArray(this.buildProperty(0x02, (0, _encoding.base10ToIeee754)(passengerTemperatureSetting))), _toConsumableArray(this.buildProperty(0x03, (0, _encoding.base10ToIeee754)(rearTemperatureSetting)))));
    }
  }, {
    key: 'getWeekdayByte',
    value: function getWeekdayByte(weekday) {
      switch (weekday) {
        case 'tuesday':
          return 0x01;
        case 'wednesday':
          return 0x02;
        case 'thursday':
          return 0x03;
        case 'friday':
          return 0x04;
        case 'satuday':
          return 0x05;
        case 'sunday':
          return 0x06;
        case 'automatic':
          return 0x07;
        default:
          return 0x00;
      }
    }
  }]);

  return ClimateCommand;
}(_BaseCommand3.default);

exports.default = ClimateCommand;