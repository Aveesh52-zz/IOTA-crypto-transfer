'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var _encoding = require('./encoding');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SdkNodeBindings = function () {
  function SdkNodeBindings(hmkit) {
    var _this = this;

    _classCallCheck(this, SdkNodeBindings);

    this.callbacks = {
      getser: function getser() {
        return (0, _encoding.hexToUint8Array)(_this.hmkit.clientCertificate.getSerial()).buffer;
      },

      getpriv: function getpriv() {
        return (0, _encoding.base64ToUint8)(_this.hmkit.clientPrivateKey).buffer;
      },

      getac: function getac(serial) {
        var accessCert = _this.hmkit.certificates.get((0, _encoding.uint8ArrayToHex)(new Uint8Array(serial)).toUpperCase());
        return accessCert ? accessCert.bytes.buffer : null;
      }
    };

    this.hmkit = hmkit;
    this.loadNativeAddOn();
  }

  _createClass(SdkNodeBindings, [{
    key: 'legacyOpenSsl',
    value: function legacyOpenSsl() {
      return !_semver2.default.gte(process.version, '10.0.0');
    }
  }, {
    key: 'loadNativeAddOn',
    value: function loadNativeAddOn() {
      /* istanbul ignore next */
      if (_fs2.default.existsSync(_path2.default.resolve(__dirname, '..', 'sdk-node-bindings', 'lib', 'binding.js'))) {
        var ref = require('../sdk-node-bindings/lib/binding.js');
        this.addon = new ref.AddonObj();
        return this.addon;
      } else if (process.platform === 'darwin') {
        var _ref = this.legacyOpenSsl() ? require('../bindings/macos') : require('../bindings/macos_openssl1.1.node');
        this.addon = new _ref.AddonObj();
        return this.addon;
      } else if (process.platform === 'linux') {
        var _ref2 = this.legacyOpenSsl() ? require('../bindings/ubuntu') : require('../bindings/ubuntu_openssl1.1.node');
        this.addon = new _ref2.AddonObj();
        return this.addon;
      } else if (process.platform === 'win32') {
        var _ref3 = this.legacyOpenSsl() ? require('../bindings/windows') : require('../bindings/windows_openssl1.1.node');
        this.addon = new _ref3.AddonObj();
        return this.addon;
      }

      /* istanbul ignore next */
      throw new Error('Native "hmkit" addon missing for your platform.');
    }
  }, {
    key: 'telematicsDataReceived',
    value: function telematicsDataReceived(buffer, callback) {
      var _this2 = this;

      return new Promise(function (resolve) {
        _this2.addon.telematicsDataReceived(_extends({}, _this2.callbacks, {
          incmtele: function incmtele(serial, id, data) {
            return resolve(callback(serial, id, data));
          }
        }), buffer);
      });
    }
  }, {
    key: 'sendTelematicsCommand',
    value: function sendTelematicsCommand(ser, nounce, buffer, callback) {
      var _this3 = this;

      return new Promise(function (resolve) {
        _this3.addon.sendTelematicsCommand(_extends({}, _this3.callbacks, {
          sendtele: function sendtele(issuer, serial, data) {
            return resolve(callback(issuer, serial, data));
          }
        }), ser, nounce, buffer);
      });
    }
  }, {
    key: 'generateSignature',
    value: function generateSignature(buffer) {
      return this.addon.generateSignature(this.callbacks, buffer);
    }
  }, {
    key: 'clearBindings',
    value: function clearBindings() {
      var _this4 = this;

      this.addon.cleanup(function () {
        return _this4;
      });
    }
  }]);

  return SdkNodeBindings;
}();

exports.default = SdkNodeBindings;