var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import AccessCertificate from './AccessCertificate';
import CertCache from './CertCache';
import { base64ToUint8, byteArrayToBase64 } from './encoding';

var AccessCertificatesManager = function () {
  function AccessCertificatesManager(hmkit) {
    var _this = this;

    _classCallCheck(this, AccessCertificatesManager);

    this.download = function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(accessToken) {
        var appIdentifier, existingCert, certFromCache, byteSignature, signature, rawAccessCertificate, accessCertificate;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                appIdentifier = _this.hmkit.clientCertificate.appIdentifier;
                existingCert = _this.find(appIdentifier, null, accessToken);

                if (!existingCert) {
                  _context.next = 4;
                  break;
                }

                return _context.abrupt('return', existingCert);

              case 4:
                certFromCache = _this.certCache.getByAccessToken(appIdentifier, accessToken);

                if (!certFromCache) {
                  _context.next = 7;
                  break;
                }

                return _context.abrupt('return', _this.addCert(certFromCache.getSerial(), appIdentifier, accessToken, certFromCache));

              case 7:
                byteSignature = _this.hmkit.crypto.generateSignature(new Uint8Array(Buffer.from(accessToken)).buffer);
                signature = byteArrayToBase64(byteSignature);
                _context.next = 11;
                return _this.hmkit.apiClient.post(_this.hmkit.api.getUrl() + 'access_certificates', {
                  body: JSON.stringify({
                    serial_number: _this.hmkit.clientCertificate.getSerial(),
                    access_token: accessToken,
                    signature: signature
                  })
                }).then(function (result) {
                  return result.body.device_access_certificate;
                }, function () {
                  throw new Error('Failed to fetch access certificate.');
                });

              case 11:
                rawAccessCertificate = _context.sent;
                accessCertificate = new AccessCertificate(base64ToUint8(rawAccessCertificate));


                _this.certCache.set(appIdentifier, accessCertificate.getSerial(), accessToken, rawAccessCertificate);

                return _context.abrupt('return', _this.addCert(accessCertificate.getSerial(), appIdentifier, accessToken, accessCertificate));

              case 15:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }();

    this.hmkit = hmkit;
    this.certCache = CertCache;
    this.accessCertificates = [];
  }

  _createClass(AccessCertificatesManager, [{
    key: 'get',
    value: function get(vehicleSerial) {
      var appIdentifier = this.hmkit.clientCertificate.appIdentifier;

      var existingCert = this.find(appIdentifier, vehicleSerial, null);

      if (!!existingCert) return existingCert;

      var certFromCache = this.certCache.getByVehicleSerial(appIdentifier, vehicleSerial);

      return this.addCert(vehicleSerial, appIdentifier, null, certFromCache);
    }
  }, {
    key: 'find',
    value: function find(appIdentifier, vehicleSerial, accessToken) {
      var accessCertificate = this.accessCertificates.find(function (accessCert) {
        return accessCert.appIdentifier === appIdentifier && (!!accessCert.vehicleSerial && accessCert.vehicleSerial === vehicleSerial || !!accessCert.accessToken && accessCert.accessToken === accessToken);
      });

      return !!accessCertificate ? accessCertificate.cert : null;
    }
  }, {
    key: 'addCert',
    value: function addCert(vehicleSerial, appIdentifier, accessToken, cert) {
      this.accessCertificates.push({
        vehicleSerial: vehicleSerial,
        appIdentifier: appIdentifier,
        accessToken: accessToken,
        cert: cert
      });

      return cert;
    }
  }]);

  return AccessCertificatesManager;
}();

export default AccessCertificatesManager;