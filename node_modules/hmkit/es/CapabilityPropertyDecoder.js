var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import Property from './Property';
import PropertyDecoder from './PropertyDecoder';

/**
 * Capabilities have a 2 byte identifier
 */

var CapabilityPropertyDecoder = function (_PropertyDecoder) {
  _inherits(CapabilityPropertyDecoder, _PropertyDecoder);

  function CapabilityPropertyDecoder() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, CapabilityPropertyDecoder);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CapabilityPropertyDecoder.__proto__ || Object.getPrototypeOf(CapabilityPropertyDecoder)).call.apply(_ref, [this].concat(args))), _this), _this.parseComponents = function (data, timestamp, error) {
      if (_this.subProperties.length > 0) {
        var subProperty = _this.findSubProperty(data.slice(0, 2));

        if (!!subProperty) {
          if (_this.subPropertiesIdentifierNamespace !== null) {
            return _defineProperty({}, _this.namespace, [_extends(_defineProperty({}, _this.subPropertiesIdentifierNamespace, subProperty.identifierValue), subProperty.parseComponents(data.slice(2, data.length), timestamp, error, false))]);
          }

          return _defineProperty({}, _this.namespace, subProperty.parseComponents(data.slice(2, data.length), timestamp, error, false));
        }

        return _defineProperty({}, _this.namespace, null);
      }

      return _defineProperty({}, _this.namespace, _this.decode(data.slice(2, data.length)));
    }, _this.findSubProperty = function (identifiers) {
      return _this.subProperties.find(function (subProperty) {
        return Array.isArray(subProperty.identifier) && subProperty.identifier[0] === identifiers[0] && subProperty.identifier[1] === identifiers[1];
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  return CapabilityPropertyDecoder;
}(PropertyDecoder);

export default CapabilityPropertyDecoder;