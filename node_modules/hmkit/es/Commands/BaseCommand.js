var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { decimalToHexArray, PROPERTY_DATA_ID } from '../encoding';
import { isArray } from '../helpers';

var BaseCommand = function () {
  function BaseCommand() {
    _classCallCheck(this, BaseCommand);
  }

  _createClass(BaseCommand, null, [{
    key: 'buildProperty',
    value: function buildProperty(identifier, value, encodingFunc) {
      var encodedValue = this.encodeProperty(value, encodingFunc);

      var dataComponent = [PROPERTY_DATA_ID].concat(_toConsumableArray(decimalToHexArray(encodedValue.length, 2)), _toConsumableArray(encodedValue));

      return [identifier].concat(_toConsumableArray(decimalToHexArray(dataComponent.length, 2)), _toConsumableArray(dataComponent));
    }
  }, {
    key: 'encodeProperty',
    value: function encodeProperty(value, encodingFunc) {
      if (!!encodingFunc) {
        var encodedValue = encodingFunc(value);
        return isArray(encodedValue) ? encodedValue : [encodedValue];
      }

      return isArray(value) ? value : [value];
    }
  }]);

  return BaseCommand;
}();

export default BaseCommand;