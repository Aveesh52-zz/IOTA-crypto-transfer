var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import Command from './Command';
import BaseCommand from './BaseCommand';
import { dateToBytes } from '../encoding';
import CAPABILITY_IDENTIFIERS from '../CAPABILITY_IDENTIFIERS';

var HistoricalCommand = function (_BaseCommand) {
  _inherits(HistoricalCommand, _BaseCommand);

  function HistoricalCommand() {
    _classCallCheck(this, HistoricalCommand);

    return _possibleConstructorReturn(this, (HistoricalCommand.__proto__ || Object.getPrototypeOf(HistoricalCommand)).apply(this, arguments));
  }

  _createClass(HistoricalCommand, null, [{
    key: 'getStates',

    /**
     * @function getStates
     *
     * @property {String} capability (string: 'door_locks | trunk | wake_up | charging | climate | rooftop_control | honk_horn_flash_lights | remote_control | valet_mode | heart_rate | vehicle_location | navi_destination | diagnostics | maintenance | engine | lights | messaging | notifications | fueling | driver_fatigue | windscreen | video_handover | text_input | windows | theft_alarm | parking_ticket | keyfob_position | browser | vehicle_time | graphics | offroad | chassis_settings | light_conditions | weather_conditions | seats | race | parking_brake | wi_fi | home_charger | dashboard_lights | cruise_control | start_stop | tachograph | power_takeoff | mobile | hood | usage') Capability
     * @property {Date} startDate (date) Start date (optional)
     * @property {Date} endDate (date) End date (optional)
     */
    value: function getStates(capability, startDate, endDate) {
      var capabilityConf = Object.entries(CAPABILITY_IDENTIFIERS).find(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 1),
            namespace = _ref2[0];

        return namespace === capability;
      });

      if (capabilityConf !== undefined) {
        var startDateBytes = !!startDate ? this.buildProperty(0x02, dateToBytes(startDate)) : [];
        var endDateBytes = !!endDate ? this.buildProperty(0x03, dateToBytes(endDate)) : [];

        return new Command([0x00, 0x12, 0x00].concat(_toConsumableArray(this.buildProperty(0x01, capabilityConf[1].identifier)), _toConsumableArray(startDateBytes), _toConsumableArray(endDateBytes)));
      }

      return new Command([0x00, 0x12, 0x00]);
    }
  }]);

  return HistoricalCommand;
}(BaseCommand);

export default HistoricalCommand;