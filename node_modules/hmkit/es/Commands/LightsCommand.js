var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import Command from './Command';
import BaseCommand from './BaseCommand';
import { hexToInt } from '../encoding';

var LightsCommand = function (_BaseCommand) {
  _inherits(LightsCommand, _BaseCommand);

  function LightsCommand() {
    _classCallCheck(this, LightsCommand);

    return _possibleConstructorReturn(this, (LightsCommand.__proto__ || Object.getPrototypeOf(LightsCommand)).apply(this, arguments));
  }

  _createClass(LightsCommand, null, [{
    key: 'getState',

    /**
     * @function getState
     */
    value: function getState() {
      return new Command([0x00, 0x36, 0x00]);
    }

    /**
     * @function control
     *
     * @property {String} frontExteriorLight (string: 'inactive|active|active_with_full_beam|dlr|automatic') Front exterior light
     * @property {String} rearExteriorLight (string: 'inactive|active') Rear exterior light
     * @property {String} ambientLight (string) Ambient light
     * @property {Array} fogLights (Array) Fog lights [{ location: (string: 'front|rear'), state: (string: 'inactive|active') }]
     * @property {Array} readingLamps (Array) Reading lamps [{ location: (string: 'front_left|front_right|rear_right|rear_left'), state: (string: 'inactive|active') }]
     * @property {Array} interiorLights (Array) Interior lights [{ location: (string: 'front|rear'), state: (string: 'inactive|active') }]
     */

  }, {
    key: 'control',
    value: function control(frontExteriorLight, rearExteriorLight, ambientLight, fogLights, readingLamps, interiorLights) {
      var _this2 = this;

      var allFrontBytes = [];
      var allRearBytes = [];
      var allAmbientBytes = [];
      var allFogLightsBytes = [];
      var allReadingLampsBytes = [];
      var allInteriorLightsBytes = [];

      if (!!frontExteriorLight && frontExteriorLight.length > 0) {
        var frontExteriorLightOptions = {
          inactive: 0x00,
          active: 0x01,
          active_with_full_beam: 0x02,
          dlr: 0x03,
          automatic: 0x04
        };

        allFrontBytes = this.buildProperty(0x01, frontExteriorLightOptions[frontExteriorLight]);
      }

      if (!!rearExteriorLight && rearExteriorLight.length > 0) {
        var rearExteriorLightOptions = {
          inactive: 0x00,
          active: 0x01
        };

        allRearBytes = this.buildProperty(0x02, rearExteriorLightOptions[rearExteriorLight]);
      }

      if (!!ambientLight && ambientLight.length > 0) {
        var red = hexToInt(ambientLight.slice(1, 3));
        var green = hexToInt(ambientLight.slice(3, 5));
        var blue = hexToInt(ambientLight.slice(5, 7));

        allAmbientBytes = this.buildProperty(0x04, [red, green, blue]);
      }

      if (Array.isArray(fogLights) && fogLights.length > 0) {
        var fogLightsPositions = {
          front: 0x00,
          rear: 0x01
        };

        var fogLightsOptions = {
          inactive: 0x00,
          active: 0x01
        };

        allFogLightsBytes = fogLights.reduce(function (fogLightBytes, _ref) {
          var location = _ref.location,
              state = _ref.state;
          return fogLightBytes.concat(_this2.buildProperty(0x07, [fogLightsPositions[location], fogLightsOptions[state]]));
        }, []);
      }

      if (Array.isArray(readingLamps) && readingLamps.length > 0) {
        var readingLampsPositions = {
          front_left: 0x00,
          front_right: 0x01,
          rear_right: 0x02,
          rear_left: 0x03
        };

        var readingLampsOptions = {
          inactive: 0x00,
          active: 0x01
        };

        allReadingLampsBytes = readingLamps.reduce(function (readingLampBytes, _ref2) {
          var location = _ref2.location,
              state = _ref2.state;
          return readingLampBytes.concat(_this2.buildProperty(0x08, [readingLampsPositions[location], readingLampsOptions[state]]));
        }, []);
      }

      if (Array.isArray(interiorLights) && interiorLights.length > 0) {
        var interiorLightsPositions = {
          front: 0x00,
          rear: 0x01
        };

        var interiorLightsOptions = {
          inactive: 0x00,
          active: 0x01
        };

        allInteriorLightsBytes = interiorLights.reduce(function (interiorLightBytes, _ref3) {
          var location = _ref3.location,
              state = _ref3.state;
          return interiorLightBytes.concat(_this2.buildProperty(0x09, [interiorLightsPositions[location], interiorLightsOptions[state]]));
        }, []);
      }

      return new Command([0x00, 0x36, 0x12].concat(_toConsumableArray(allFrontBytes), _toConsumableArray(allRearBytes), _toConsumableArray(allAmbientBytes), _toConsumableArray(allFogLightsBytes), _toConsumableArray(allReadingLampsBytes), _toConsumableArray(allInteriorLightsBytes)));
    }
  }]);

  return LightsCommand;
}(BaseCommand);

export default LightsCommand;