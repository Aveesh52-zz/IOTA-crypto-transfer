var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import Command from './Command';
import BaseCommand from './BaseCommand';
import { stringToBytes } from '../encoding';

var NotificationCommand = function (_BaseCommand) {
  _inherits(NotificationCommand, _BaseCommand);

  function NotificationCommand() {
    _classCallCheck(this, NotificationCommand);

    return _possibleConstructorReturn(this, (NotificationCommand.__proto__ || Object.getPrototypeOf(NotificationCommand)).apply(this, arguments));
  }

  _createClass(NotificationCommand, null, [{
    key: 'send',

    /**
     * @function send
     *
     * @property {String} text (string) Text
     * @property {Object} actions (Object `{action1Id: action1Text, action2Id: action2Text, ..}`) Actions
     *
     * @example send
      const response = await hmkit.telematics.sendCommand(
        vehicleSerial,
        hmkit.commands.NotificationCommand.send(
          'Start navigation?',
          {
            0: 'No',
            1: 'Yes',
            2: 'Soon',
          }
        );
      );
     */
    value: function send(text, actions) {
      return new Command([0x00, 0x38, 0x00].concat(_toConsumableArray(this.buildProperty(0x01, stringToBytes(text))), _toConsumableArray(this.getActionsBytes(actions))));
    }

    /**
     * @function clear
     */

  }, {
    key: 'clear',
    value: function clear() {
      return new Command([0x00, 0x38, 0x02]);
    }
  }, {
    key: 'getActionsBytes',
    value: function getActionsBytes(actions) {
      var _this2 = this;

      return Object.entries(actions).reduce(function (actionBytes, _ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            actionId = _ref2[0],
            actionName = _ref2[1];

        return actionBytes.concat(_this2.buildProperty(0x02, [actionId].concat(_toConsumableArray(stringToBytes(actionName)))));
      }, []);
    }
  }]);

  return NotificationCommand;
}(BaseCommand);

export default NotificationCommand;