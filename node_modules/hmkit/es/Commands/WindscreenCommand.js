var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import Command from './Command';
import BaseCommand from './BaseCommand';
import { validate, Joi } from '../validate';

var WindscreenCommand = function (_BaseCommand) {
  _inherits(WindscreenCommand, _BaseCommand);

  function WindscreenCommand() {
    _classCallCheck(this, WindscreenCommand);

    return _possibleConstructorReturn(this, (WindscreenCommand.__proto__ || Object.getPrototypeOf(WindscreenCommand)).apply(this, arguments));
  }

  _createClass(WindscreenCommand, null, [{
    key: 'getState',

    /**
     * @function getState
     */
    value: function getState() {
      return new Command([0x00, 0x42, 0x00]);
    }

    /**
     *
     * @function setDamage
     *
     * @property {String} damage (string 'impact_but_no_damage_detected, damage_smaller_than_1_inch, damage_larger_than_1_inch, no_damage') Windscreen Damage
     * @property {Number} damageZoneRow (number) Limit from 1 to 16, representing the horizontal position of the damage
     * @property {Number} damageZoneColumn (number) Limit from 1 to 16, representing the vertical position of the damage
     */

  }, {
    key: 'setDamage',
    value: function setDamage(damage, damageZoneRow, damageZoneColumn) {
      validate([{
        value: damage,
        name: 'Damage',
        condition: Joi.string().required()
      }, {
        value: damageZoneRow,
        name: 'Damage zone row',
        condition: Joi.number().required()
      }, {
        value: damageZoneColumn,
        name: 'Damage zone column',
        condition: Joi.number().required()
      }]);

      return new Command([0x00, 0x42, 0x12].concat(_toConsumableArray(this.buildProperty(0x01, this.getDamageByte(damage))), _toConsumableArray(this.buildProperty(0x02, ((damageZoneRow & 0x0f) << 4) + (damageZoneColumn & 0x0f)))));
    }

    /**
     * @function setReplacement
     *
     * @property {String} needsReplacement (string 'no_replacement_needed, replacement_needed, unknown') Windscreen damage needs replacement
     */

  }, {
    key: 'setReplacement',
    value: function setReplacement(needsReplacement) {
      validate([{
        value: needsReplacement,
        name: 'Needs replacement',
        condition: Joi.string().required()
      }]);

      return new Command([0x00, 0x42, 0x13].concat(_toConsumableArray(this.buildProperty(0x01, this.getNeedReplacementByte(needsReplacement)))));
    }

    /**
     * @function controlWipers
     *
     * @property {String} wipersState (string 'inactive|active|automatic') Wipers state
     * @property {String} wipersIntensity (string 'level_0|level_1|level_2|level_3') Wipers intensity (optional)
     */

  }, {
    key: 'controlWipers',
    value: function controlWipers(wipersState, wipersIntensity) {
      validate([{
        value: wipersState,
        name: 'Wipers state',
        condition: Joi.string().required()
      }, {
        value: wipersIntensity,
        name: 'Wipers intensity',
        condition: Joi.string()
      }]);

      var wipersIntensityBytes = [];

      if (!!wipersIntensity) {
        wipersIntensityBytes = this.buildProperty(0x02, this.getWipersIntensityByte(wipersIntensity));
      }

      return new Command([0x00, 0x42, 0x14].concat(_toConsumableArray(this.buildProperty(0x01, this.getWiperStateByte(wipersState))), _toConsumableArray(wipersIntensityBytes)));
    }
  }, {
    key: 'getDamageByte',
    value: function getDamageByte(damage) {
      switch (damage) {
        case 'impact_but_no_damage_detected':
          return 0x01;
        case 'damage_smaller_than_1_inch':
          return 0x02;
        case 'damage_larger_than_1_inch':
          return 0x03;
        default:
          return 0x00;
      }
    }
  }, {
    key: 'getNeedReplacementByte',
    value: function getNeedReplacementByte(needsReplacement) {
      switch (needsReplacement) {
        case 'no':
        case 'no_replacement_needed':
          return 0x01;
        case 'yes':
        case 'replacement_needed':
          return 0x02;
        default:
          return 0x00;
      }
    }
  }, {
    key: 'getWiperStateByte',
    value: function getWiperStateByte(wiperState) {
      switch (wiperState) {
        case 'active':
          return 0x01;
        case 'automatic':
          return 0x02;
        default:
          return 0x00;
      }
    }
  }, {
    key: 'getWipersIntensityByte',
    value: function getWipersIntensityByte(wipersIntensity) {
      switch (wipersIntensity) {
        case 'level_1':
          return 0x01;
        case 'level_2':
          return 0x02;
        case 'level_3':
          return 0x03;
        default:
          return 0x00;
      }
    }
  }]);

  return WindscreenCommand;
}(BaseCommand);

export default WindscreenCommand;