var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import Command from './Command';
import BaseCommand from './BaseCommand';
import { stringToBytes } from '../encoding';
import { validate, Joi } from '../validate';

var WiFiCommand = function (_BaseCommand) {
  _inherits(WiFiCommand, _BaseCommand);

  function WiFiCommand() {
    _classCallCheck(this, WiFiCommand);

    return _possibleConstructorReturn(this, (WiFiCommand.__proto__ || Object.getPrototypeOf(WiFiCommand)).apply(this, arguments));
  }

  _createClass(WiFiCommand, null, [{
    key: 'getState',

    /**
     * @function getState
     */
    value: function getState() {
      return new Command([0x00, 0x59, 0x00]);
    }

    /**
     * @function connectToNetwork
     *
     * @property {String} SSID (string) The network SSID formatted in UTF-8
     * @property {String} security (string 'none, wep, wpa, wpa2_personal') Security
     * @property {String} password (string) Password
     *
     * @example connectToNetwork
      const response = await hmkit.telematics.sendCommand(
        vehicleSerial,
        hmkit.commands.WiFiCommand.connectToNetwork(
          'DEFINITELYFREEWIFI',
          'wpa',
          'secret666'
        )
      );
     */

  }, {
    key: 'connectToNetwork',
    value: function connectToNetwork(SSID, security) {
      var password = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

      var securityOptions = {
        none: 0x00,
        wep: 0x01,
        wpa: 0x02,
        wpa2_personal: 0x03
      };

      validate([{
        value: SSID,
        name: 'SSID',
        condition: Joi.string().required()
      }, {
        value: security,
        name: 'Security',
        condition: Joi.string().required().valid(Object.keys(securityOptions))
      }]);

      return new Command([0x00, 0x59, 0x02].concat(_toConsumableArray(this.buildProperty(0x03, stringToBytes(SSID))), _toConsumableArray(this.buildProperty(0x04, securityOptions[security])), _toConsumableArray(this.buildProperty(0x05, stringToBytes(password)))));
    }

    /**
     * @function forgetNetwork
     *
     * @property {String} SSID (string) The network SSID formatted in UTF-8
     */

  }, {
    key: 'forgetNetwork',
    value: function forgetNetwork(SSID) {
      validate([{
        value: SSID,
        name: 'SSID',
        condition: Joi.string().required()
      }]);

      return new Command([0x00, 0x59, 0x03].concat(_toConsumableArray(this.buildProperty(0x03, stringToBytes(SSID)))));
    }

    /**
     * @function enableDisable
     */

  }, {
    key: 'enableDisable',
    value: function enableDisable(newState) {
      var newWifiStateOptions = {
        disabled: 0x00,
        enabled: 0x01
      };

      validate([{
        value: newState,
        name: 'New wifi state',
        condition: Joi.string().required().valid(Object.keys(newWifiStateOptions))
      }]);

      return new Command([0x00, 0x59, 0x04].concat(_toConsumableArray(this.buildProperty(0x04, newWifiStateOptions[newState]))));
    }
  }]);

  return WiFiCommand;
}(BaseCommand);

export default WiFiCommand;