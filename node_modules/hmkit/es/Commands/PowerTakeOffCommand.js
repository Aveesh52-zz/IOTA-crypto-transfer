var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import Command from './Command';
import BaseCommand from './BaseCommand';

var PowerTakeOffCommand = function (_BaseCommand) {
  _inherits(PowerTakeOffCommand, _BaseCommand);

  function PowerTakeOffCommand() {
    _classCallCheck(this, PowerTakeOffCommand);

    return _possibleConstructorReturn(this, (PowerTakeOffCommand.__proto__ || Object.getPrototypeOf(PowerTakeOffCommand)).apply(this, arguments));
  }

  _createClass(PowerTakeOffCommand, null, [{
    key: 'getState',

    /**
     * @function getState
     */
    value: function getState() {
      return new Command([0x00, 0x65, 0x00]);
    }

    /**
     * @function activate
     */

  }, {
    key: 'activate',
    value: function activate() {
      return new Command([0x00, 0x65, 0x02].concat(_toConsumableArray(this.buildProperty(0x01, 0x01))));
    }

    /**
     * @function deactivate
     */

  }, {
    key: 'deactivate',
    value: function deactivate() {
      return new Command([0x00, 0x65, 0x02].concat(_toConsumableArray(this.buildProperty(0x01, 0x00))));
    }
  }]);

  return PowerTakeOffCommand;
}(BaseCommand);

export default PowerTakeOffCommand;