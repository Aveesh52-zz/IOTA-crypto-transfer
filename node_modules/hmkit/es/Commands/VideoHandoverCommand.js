var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import Command from './Command';
import BaseCommand from './BaseCommand';
import { intToTwoBytes, stringToBytes } from '../encoding';
import { validate, Joi } from '../validate';

var VideoHandoverCommand = function (_BaseCommand) {
  _inherits(VideoHandoverCommand, _BaseCommand);

  function VideoHandoverCommand() {
    _classCallCheck(this, VideoHandoverCommand);

    return _possibleConstructorReturn(this, (VideoHandoverCommand.__proto__ || Object.getPrototypeOf(VideoHandoverCommand)).apply(this, arguments));
  }

  _createClass(VideoHandoverCommand, null, [{
    key: 'handover',

    /**
     * @function handover
     *
     * @property {String} videoURL (string) The URL of the video stream, formatted in UTF-8
     * @property {Number} startingSecond (number) The second from where the video should be started from
     * @property {String} screen (string) Front screen or Rear screen
     */
    value: function handover(videoURL) {
      var _Joi$string;

      var startingSecond = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var screen = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'front';

      var screenOptions = {
        front: 0x00,
        rear: 0x01
      };

      validate([{
        value: videoURL,
        name: 'Video url',
        condition: Joi.string().required()
      }, {
        value: startingSecond,
        name: 'Starting second',
        condition: Joi.number()
      }, {
        value: screen,
        name: 'Screen',
        condition: (_Joi$string = Joi.string()).valid.apply(_Joi$string, _toConsumableArray(Object.keys(screenOptions)))
      }]);

      return new Command([0x00, 0x43, 0x00].concat(_toConsumableArray(this.buildProperty(0x01, stringToBytes(videoURL))), _toConsumableArray(this.buildProperty(0x02, intToTwoBytes(startingSecond))), _toConsumableArray(!!screen ? this.buildProperty(0x03, screenOptions[screen]) : [])));
    }
  }]);

  return VideoHandoverCommand;
}(BaseCommand);

export default VideoHandoverCommand;