var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import Command from './Command';
import BaseCommand from './BaseCommand';
import { percentageToDouble } from '../encoding';

var WindowsCommand = function (_BaseCommand) {
  _inherits(WindowsCommand, _BaseCommand);

  function WindowsCommand() {
    _classCallCheck(this, WindowsCommand);

    return _possibleConstructorReturn(this, (WindowsCommand.__proto__ || Object.getPrototypeOf(WindowsCommand)).apply(this, arguments));
  }

  _createClass(WindowsCommand, null, [{
    key: 'getState',

    /**
     * @function getState
     */
    value: function getState() {
      return new Command([0x00, 0x45, 0x00]);
    }

    /**
     * @function control
     *
     * @property {Array<Object>} windowsOpenPercentages Windows open percentages [{ windowLocation: (string: 'front_left|front_right|rear_right|rear_left|hatch'), openPercentage: (number) }]
     * @property {Array<Object>} windowsPositions Windows positions [{ windowLocation: (string: 'front_left|front_right|rear_right|rear_left|hatch'), windowPosition: (string: 'closed|opened|intermediate') }]
     *
     * @example control
      const response = await hmkit.telematics.sendCommand(
        vehicleSerial,
        hmkit.commands.WindowsCommand.control(
          [{
            windowLocation: 'front_right',
            openPercentage: 0.5,
          }, {
            windowLocation: 'rear_right',
            openPercentage: 0.5,
          }, {
            windowLocation: 'front_left',
            openPercentage: 0.5,
          }, {
            windowLocation: 'rear_left',
            openPercentage: 0.5,
          }, {
            windowLocation: 'hatch',
            openPercentage: 0.5,
          }],
           [{
            windowLocation: 'front_right',
            windowPosition: 'open',
          }, {
            windowLocation: 'rear_right',
            windowPosition: 'open',
          }, {
            windowLocation: 'front_left',
            windowPosition: 'close',
          }, {
            windowLocation: 'rear_left',
            windowPosition: 'close',
          }, {
            windowLocation: 'hatch',
            windowPosition: 'open',
          }]
        )
      );
     */

  }, {
    key: 'control',
    value: function control(openPercentages, windowPositions) {
      return new Command([0x00, 0x45, 0x12].concat(_toConsumableArray(this.getWindowOpenPercentageBytes(openPercentages)), _toConsumableArray(this.getWindowPositionBytes(windowPositions))));
    }
  }, {
    key: 'getWindowOpenPercentageBytes',
    value: function getWindowOpenPercentageBytes(openPercentages) {
      var _this2 = this;

      if (!!openPercentages && Array.isArray(openPercentages)) {
        var _ref;

        return (_ref = []).concat.apply(_ref, _toConsumableArray(openPercentages.map(function (_ref2) {
          var windowLocation = _ref2.windowLocation,
              openPercentage = _ref2.openPercentage;
          return _this2.buildProperty(0x01, [_this2.getWindowLocationByte(windowLocation)].concat(_toConsumableArray(percentageToDouble(openPercentage))));
        })));
      }

      return [];
    }
  }, {
    key: 'getWindowPositionBytes',
    value: function getWindowPositionBytes(windowPositions) {
      var _this3 = this;

      if (!!windowPositions && Array.isArray(windowPositions)) {
        var _ref3;

        return (_ref3 = []).concat.apply(_ref3, _toConsumableArray(windowPositions.map(function (_ref4) {
          var windowLocation = _ref4.windowLocation,
              windowPosition = _ref4.windowPosition;
          return _this3.buildProperty(0x02, [_this3.getWindowLocationByte(windowLocation), _this3.getWindowOpenCloseByte(windowPosition)]);
        })));
      }

      return [];
    }
  }, {
    key: 'getWindowLocationByte',
    value: function getWindowLocationByte(position) {
      switch (position) {
        case 'front_right':
          return 0x01;
        case 'rear_right':
          return 0x02;
        case 'rear_left':
          return 0x03;
        case 'hatch':
          return 0x04;
        default:
          return 0x00;
      }
    }
  }, {
    key: 'getWindowOpenCloseByte',
    value: function getWindowOpenCloseByte(openClose) {
      switch (openClose) {
        case 'open':
          return 0x01;
        default:
          return 0x00;
      }
    }
  }]);

  return WindowsCommand;
}(BaseCommand);

export default WindowsCommand;