var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import Command from './Command';
import { intToTwoBytes, stringToBytes } from '../encoding';

var GraphicsCommand = function () {
  function GraphicsCommand() {
    _classCallCheck(this, GraphicsCommand);
  }

  _createClass(GraphicsCommand, null, [{
    key: 'displayImage',

    /**
     * @function displayImage
     *
     * @property {String} url (string) Image url
     */
    value: function displayImage(url) {
      var urlBytes = stringToBytes(url);

      return new Command([0x00, 0x51, 0x00, 0x01].concat(_toConsumableArray(intToTwoBytes(urlBytes.length)), _toConsumableArray(urlBytes)));
    }
  }]);

  return GraphicsCommand;
}();

export default GraphicsCommand;