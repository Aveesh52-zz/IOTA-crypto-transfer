var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import Command from './Command';
import BaseCommand from './BaseCommand';
import { validate, Joi } from '../validate';

var ChassisSettingsCommand = function (_BaseCommand) {
  _inherits(ChassisSettingsCommand, _BaseCommand);

  function ChassisSettingsCommand() {
    _classCallCheck(this, ChassisSettingsCommand);

    return _possibleConstructorReturn(this, (ChassisSettingsCommand.__proto__ || Object.getPrototypeOf(ChassisSettingsCommand)).apply(this, arguments));
  }

  _createClass(ChassisSettingsCommand, null, [{
    key: 'getSettings',

    /**
     * @function getSettings
     */
    value: function getSettings() {
      return new Command([0x00, 0x53, 0x00]);
    }

    /**
     * @function setDrivingMode
     *
     * @property {String} drivingMode (string: 'regular', 'eco', 'sport', 'sport_plus', 'eco_plus') Driving mode
     */

  }, {
    key: 'setDrivingMode',
    value: function setDrivingMode(drivingMode) {
      validate([{
        value: drivingMode,
        name: 'Driving mode',
        condition: Joi.string().valid('regular', 'eco', 'sport', 'sport_plus', 'eco_plus').required()
      }]);

      var drivingModeOptions = {
        regular: 0x00,
        eco: 0x01,
        sport: 0x02,
        sport_plus: 0x03,
        eco_plus: 0x04
      };

      return new Command([0x00, 0x53, 0x12].concat(_toConsumableArray(this.buildProperty(0x01, drivingModeOptions[drivingMode]))));
    }

    /**
     * @function startSportChrono
     */

  }, {
    key: 'startSportChrono',
    value: function startSportChrono() {
      return new Command([0x00, 0x53, 0x13].concat(_toConsumableArray(this.buildProperty(0x01, 0x00))));
    }

    /**
     * @function stopSportChrono
     */

  }, {
    key: 'stopSportChrono',
    value: function stopSportChrono() {
      return new Command([0x00, 0x53, 0x13].concat(_toConsumableArray(this.buildProperty(0x01, 0x01))));
    }

    /**
     * @function resetSportChrono
     */

  }, {
    key: 'resetSportChrono',
    value: function resetSportChrono() {
      return new Command([0x00, 0x53, 0x13].concat(_toConsumableArray(this.buildProperty(0x01, 0x02))));
    }

    /**
     * @function setFrontAxleSpringRate
     *
     * @property {Number} rate (number) Spring rate
     */

  }, {
    key: 'setFrontAxleSpringRate',
    value: function setFrontAxleSpringRate(rate) {
      validate([{
        value: rate,
        name: 'Rate',
        condition: Joi.number().required()
      }]);

      var rateByte = rate << 24 >> 24 & 0xff;

      return new Command([0x00, 0x53, 0x14].concat(_toConsumableArray(this.buildProperty(0x01, [0x00, rateByte]))));
    }

    /**
     * @function setRearAxleSpringRate
     *
     * @property {Number} rate (number) Spring rate
     */

  }, {
    key: 'setRearAxleSpringRate',
    value: function setRearAxleSpringRate(rate) {
      validate([{
        value: rate,
        name: 'Rate',
        condition: Joi.number().required()
      }]);

      var rateByte = rate << 24 >> 24 & 0xff;

      return new Command([0x00, 0x53, 0x14].concat(_toConsumableArray(this.buildProperty(0x01, [0x01, rateByte]))));
    }

    /**
     * @function setChassisPosition
     *
     * @property {Number} position (number) Chassis position
     */

  }, {
    key: 'setChassisPosition',
    value: function setChassisPosition(position) {
      validate([{
        value: position,
        name: 'Position',
        condition: Joi.number().required()
      }]);

      var positionByte = position << 24 >> 24 & 0xff;

      return new Command([0x00, 0x53, 0x15].concat(_toConsumableArray(this.buildProperty(0x01, positionByte))));
    }
  }]);

  return ChassisSettingsCommand;
}(BaseCommand);

export default ChassisSettingsCommand;