var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import Command from './Command';
import BaseCommand from './BaseCommand';

import { base10ToIeee754Double, stringToBytes } from '../encoding';

var NaviDestinationCommand = function (_BaseCommand) {
  _inherits(NaviDestinationCommand, _BaseCommand);

  function NaviDestinationCommand() {
    _classCallCheck(this, NaviDestinationCommand);

    return _possibleConstructorReturn(this, (NaviDestinationCommand.__proto__ || Object.getPrototypeOf(NaviDestinationCommand)).apply(this, arguments));
  }

  _createClass(NaviDestinationCommand, null, [{
    key: 'getDestination',

    /**
     * @function getDestination
     */
    value: function getDestination() {
      return new Command([0x00, 0x31, 0x00]);
    }

    /**
     * @function setDestination
     *
     * @property {Number} latitude (number) Latitude in decimal format e.g. 52.52
     * @property {Number} longitude (number) Longitude in decimal format e.g. 13.42
     * @property {String} destinationName (string) destination name
     */

  }, {
    key: 'setDestination',
    value: function setDestination(latitude, longitude) {
      var destinationName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

      var nameBytes = destinationName.length > 0 ? this.buildProperty(0x02, destinationName, stringToBytes) : [];

      return new Command([0x00, 0x31, 0x12].concat(_toConsumableArray(this.buildProperty(0x01, [].concat(_toConsumableArray(base10ToIeee754Double(latitude)), _toConsumableArray(base10ToIeee754Double(longitude))))), _toConsumableArray(nameBytes)));
    }
  }]);

  return NaviDestinationCommand;
}(BaseCommand);

export default NaviDestinationCommand;