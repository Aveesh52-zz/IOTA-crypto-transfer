var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import Command from './Command';
import BaseCommand from './BaseCommand';
import { stringToBytes, dateToBytes } from '../encoding';
import { validate, Joi } from '../validate';

var ParkingTicketCommand = function (_BaseCommand) {
  _inherits(ParkingTicketCommand, _BaseCommand);

  function ParkingTicketCommand() {
    _classCallCheck(this, ParkingTicketCommand);

    return _possibleConstructorReturn(this, (ParkingTicketCommand.__proto__ || Object.getPrototypeOf(ParkingTicketCommand)).apply(this, arguments));
  }

  _createClass(ParkingTicketCommand, null, [{
    key: 'getTicket',

    /**
     * @function getTicket
     */
    value: function getTicket() {
      return new Command([0x00, 0x47, 0x00]);
    }

    /**
     * @function start
     *
     * @property {String} operatorName (string) Operator name (optional)
     * @property {Number} operatorTicketID (number) Operator ticket id
     * @property {Date} ticketStartTime (date) Ticket start time
     * @property {Date} ticketEndTime (date) Ticket end time (optional)
     *
     * @example start
      const response = await hmkit.telematics.sendCommand(
        vehicleSerial,
        hmkit.commands.ParkingTicketCommand.start(
          'Berlin Parking',
          '6489423333asd',
          new Date(Date.UTC(2018, 1, 14, 18, 30, 1)),
          new Date(Date.UTC(2018, 1, 17, 12, 5, 2))
        );
      );
     */

  }, {
    key: 'start',
    value: function start(operatorName, operatorTicketID, ticketStartTime, ticketEndTime) {
      validate([{
        value: operatorName,
        name: 'Operator name',
        condition: Joi.string()
      }, {
        value: operatorTicketID,
        name: 'Operator ticket ID',
        condition: Joi.string().required()
      }, {
        value: ticketStartTime,
        name: 'Ticket start time',
        condition: Joi.date().required()
      }]);

      return new Command([0x00, 0x47, 0x02].concat(_toConsumableArray(!!operatorName ? this.buildProperty(0x01, stringToBytes(operatorName)) : []), _toConsumableArray(this.buildProperty(0x02, stringToBytes(operatorTicketID))), _toConsumableArray(this.buildProperty(0x03, dateToBytes(ticketStartTime))), _toConsumableArray(!!ticketEndTime ? this.buildProperty(0x04, dateToBytes(ticketEndTime)) : [])));
    }

    /**
     * @function end
     */

  }, {
    key: 'end',
    value: function end() {
      return new Command([0x00, 0x47, 0x03]);
    }
  }]);

  return ParkingTicketCommand;
}(BaseCommand);

export default ParkingTicketCommand;