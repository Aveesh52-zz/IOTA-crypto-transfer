var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import Command from './Command';
import BaseCommand from './BaseCommand';
import { dateToBytes, percentageToDouble } from '../encoding';
import { validate, Joi } from '../validate';

var ChargingCommand = function (_BaseCommand) {
  _inherits(ChargingCommand, _BaseCommand);

  function ChargingCommand() {
    _classCallCheck(this, ChargingCommand);

    return _possibleConstructorReturn(this, (ChargingCommand.__proto__ || Object.getPrototypeOf(ChargingCommand)).apply(this, arguments));
  }

  _createClass(ChargingCommand, null, [{
    key: 'getChargeState',

    /**
     * @function getChargeState
     */
    value: function getChargeState() {
      return new Command([0x00, 0x23, 0x00]);
    }

    /**
     * @function startCharging
     */

  }, {
    key: 'startCharging',
    value: function startCharging() {
      return new Command([0x00, 0x23, 0x12].concat(_toConsumableArray(this.buildProperty(0x01, 0x01))));
    }

    /**
     * @function stopCharging
     */

  }, {
    key: 'stopCharging',
    value: function stopCharging() {
      return new Command([0x00, 0x23, 0x12].concat(_toConsumableArray(this.buildProperty(0x01, 0x00))));
    }

    /**
     * @function setChargeLimit
     *
     * @property {Number} limit (number) Limit from 0 (0%) to 1 (100%).
     */

  }, {
    key: 'setChargeLimit',
    value: function setChargeLimit(limit) {
      validate([{
        value: limit,
        name: 'Limit',
        condition: Joi.number().min(0).max(100).required()
      }]);

      return new Command([0x00, 0x23, 0x13].concat(_toConsumableArray(this.buildProperty(0x01, percentageToDouble(limit)))));
    }

    /**
     * @function openChargePort
     */

  }, {
    key: 'openChargePort',
    value: function openChargePort() {
      return new Command([0x00, 0x23, 0x14].concat(_toConsumableArray(this.buildProperty(0x01, 0x01))));
    }

    /**
     * @function closeChargePort
     */

  }, {
    key: 'closeChargePort',
    value: function closeChargePort() {
      return new Command([0x00, 0x23, 0x14].concat(_toConsumableArray(this.buildProperty(0x01, 0x00))));
    }

    /**
     * @function setChargeMode
     *
     * @property {String} chargeMode (string: 'immediate|timer_based|inductive') Charge mode
     */

  }, {
    key: 'setChargeMode',
    value: function setChargeMode(chargeMode) {
      validate([{
        value: chargeMode,
        name: 'Charge mode',
        condition: Joi.string().valid('immediate', 'timer_based', 'inductive').required()
      }]);

      // inductive not supported
      var chargeModeOptions = {
        immediate: 0x00,
        timer_based: 0x01,
        inductive: 0x02
      };

      return new Command([0x00, 0x23, 0x15].concat(_toConsumableArray(this.buildProperty(0x01, chargeModeOptions[chargeMode]))));
    }

    /**
     * @function setChargeTimers
     *
     * @property {Object} chargeTimers Charge timers ([{ timerType: (string:'preferred_start_time|preferred_end_time|departure_time'), time: (date) }])
     */

  }, {
    key: 'setChargeTimers',
    value: function setChargeTimers(chargeTimers) {
      var _this2 = this;

      var chargeTimerOptions = {
        preferred_start_time: 0x00,
        preferred_end_time: 0x01,
        departure_time: 0x02
      };

      var chargeTimerProperties = chargeTimers.reduce(function (allTimers, _ref) {
        var _Joi$string;

        var timerType = _ref.timerType,
            time = _ref.time;

        validate([{
          value: timerType,
          name: 'Timer type',
          condition: (_Joi$string = Joi.string()).valid.apply(_Joi$string, _toConsumableArray(Object.keys(chargeTimerOptions)))
        }]);

        return allTimers.concat(_this2.buildProperty(0x0d, [chargeTimerOptions[timerType]].concat(_toConsumableArray(dateToBytes(time)))));
      }, []);

      return new Command([0x00, 0x23, 0x16].concat(_toConsumableArray(chargeTimerProperties)));
    }
  }, {
    key: 'setReductionOfChargingCurrentTimes',
    value: function setReductionOfChargingCurrentTimes(reductionTimes) {
      var _this3 = this;

      var startStopOptions = {
        start: 0x00,
        stop: 0x01
      };

      var reductionTimeProperties = reductionTimes.reduce(function (allTimers, _ref2) {
        var _Joi$string2;

        var startStop = _ref2.startStop,
            hour = _ref2.hour,
            minute = _ref2.minute;

        validate([{
          value: startStop,
          name: 'Reduction timer start/stop',
          condition: (_Joi$string2 = Joi.string()).valid.apply(_Joi$string2, _toConsumableArray(Object.keys(startStopOptions)))
        }]);

        return allTimers.concat(_this3.buildProperty(0x01, [startStopOptions[startStop], hour, minute]));
      }, []);

      return new Command([0x00, 0x23, 0x17].concat(_toConsumableArray(reductionTimeProperties)));
    }
  }]);

  return ChargingCommand;
}(BaseCommand);

export default ChargingCommand;