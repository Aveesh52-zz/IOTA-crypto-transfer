var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import Command from './Command';
import BaseCommand from './BaseCommand';
import { validate, Joi } from '../validate';
import { percentageToDouble } from '../encoding';

var RooftopControlCommand = function (_BaseCommand) {
  _inherits(RooftopControlCommand, _BaseCommand);

  function RooftopControlCommand() {
    _classCallCheck(this, RooftopControlCommand);

    return _possibleConstructorReturn(this, (RooftopControlCommand.__proto__ || Object.getPrototypeOf(RooftopControlCommand)).apply(this, arguments));
  }

  _createClass(RooftopControlCommand, null, [{
    key: 'getState',

    /**
     * @function getState
     */
    value: function getState() {
      return new Command([0x00, 0x25, 0x00]);
    }

    /**
     * @function control
     *
     * @property {Number} dimming (number) Dimming from 0 (0%) to 1 (100%).
     * @property {Number} position (number) Position from 0 (0%) to 1 (100%).
     * @property {String} convertibleRoof (string 'closed|open|emergency_locked|closed_secured|open_secured|hard_top_mounted|intermediate_position|loading_position|loading_position_immediate') Convertible roof state
     * @property {String} sunroofTilt (string 'closed|tilted|half_tilted') Sunroof tilt state
     * @property {String} sunroofState (string 'closed|open|intermediate') Sunroof state
     */

  }, {
    key: 'control',
    value: function control(dimming, position, convertibleRoof, sunroofTilt, sunroofState) {
      var dimmingBytes = typeof dimming !== 'number' ? [] : this.buildProperty(0x01, percentageToDouble(dimming));

      var positionBytes = typeof position !== 'number' ? [] : this.buildProperty(0x02, percentageToDouble(position));

      var convertibleRoofBytes = [];
      var sunroofTiltBytes = [];
      var sunroofStateBytes = [];

      if (!!convertibleRoof) {
        var _Joi$string;

        var convertibleRoofOptions = {
          closed: 0x00,
          open: 0x01,
          emergency_locked: 0x02,
          closed_secured: 0x03,
          open_secured: 0x04,
          hard_top_mounted: 0x05,
          intermediate_position: 0x06,
          loading_position: 0x07,
          loading_position_immediate: 0x08
        };

        validate([{
          value: convertibleRoof,
          name: 'Convertible roof',
          condition: (_Joi$string = Joi.string()).valid.apply(_Joi$string, _toConsumableArray(Object.keys(convertibleRoofOptions)))
        }]);

        convertibleRoofBytes = this.buildProperty(0x03, convertibleRoofOptions[convertibleRoof]);
      }

      if (!!sunroofTilt) {
        var _Joi$string2;

        var sunroofTiltOptions = {
          closed: 0x00,
          tilted: 0x01,
          half_tilted: 0x02
        };

        validate([{
          value: sunroofTilt,
          name: 'Sunroof tilt',
          condition: (_Joi$string2 = Joi.string()).valid.apply(_Joi$string2, _toConsumableArray(Object.keys(sunroofTiltOptions)))
        }]);

        sunroofTiltBytes = this.buildProperty(0x04, sunroofTiltOptions[sunroofTilt]);
      }

      if (!!sunroofState) {
        var _Joi$string3;

        var sunroofStateOptions = {
          closed: 0x00,
          open: 0x01,
          intermediate: 0x02
        };

        validate([{
          value: sunroofState,
          name: 'Sunroof state',
          condition: (_Joi$string3 = Joi.string()).valid.apply(_Joi$string3, _toConsumableArray(Object.keys(sunroofStateOptions)))
        }]);

        sunroofStateBytes = this.buildProperty(0x05, sunroofStateOptions[sunroofState]);
      }

      return new Command([0x00, 0x25, 0x12].concat(_toConsumableArray(dimmingBytes), _toConsumableArray(positionBytes), _toConsumableArray(convertibleRoofBytes), _toConsumableArray(sunroofTiltBytes), _toConsumableArray(sunroofStateBytes)));
    }
  }]);

  return RooftopControlCommand;
}(BaseCommand);

export default RooftopControlCommand;