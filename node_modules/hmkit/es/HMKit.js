var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import SdkNodeBindings from './SdkNodeBindings';
import { base64ToUint8 } from './encoding';
import Commands from './Commands';
import Telematics from './Telematics';
import ClientCertificate from './ClientCertificate';
import AccessCertificatesManager from './AccessCertificatesManager';
import Api from './Api';
import ApiClient from './ApiClient';
import InvalidArgumentError from './InvalidArgumentError';

var API_URLS = {
  hmxv: 'https://xv-platform.high-mobility.com/v1/',
  test: 'https://sandbox.api.high-mobility.com/v1/'
};

var HMKit = function () {
  function HMKit(clientCertificate, clientPrivateKey) {
    _classCallCheck(this, HMKit);

    this.clientCertificate = new ClientCertificate(base64ToUint8(clientCertificate));

    if (!clientPrivateKey || clientPrivateKey.length !== 44) {
      throw new Error('Invalid client private key.');
    }

    this.clientPrivateKey = clientPrivateKey;

    this.api = new Api(this.getApiUrl());
    this.apiClient = new ApiClient();
    this.telematics = new Telematics(this);
    this.commands = new Commands(this);
    this.crypto = new SdkNodeBindings(this);
    this.certificates = new AccessCertificatesManager(this);
  }

  _createClass(HMKit, [{
    key: 'staging',
    value: function staging() {
      this.api = new Api('https://develop.high-mobility.com/hm_cloud/api/v1/');
      return this;
    }
  }, {
    key: 'getApiUrl',
    value: function getApiUrl() {
      if (this.clientCertificate && this.clientCertificate.issuer) {
        return API_URLS[this.clientCertificate.issuer] || API_URLS.test;
      }

      return API_URLS.test;
    }
  }, {
    key: 'downloadAccessCertificate',
    value: function downloadAccessCertificate() {
      var _certificates;

      return (_certificates = this.certificates).download.apply(_certificates, arguments);
    }
  }]);

  return HMKit;
}();

HMKit.InvalidArgumentError = InvalidArgumentError;
export default HMKit;