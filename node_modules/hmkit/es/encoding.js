import atob from 'atob';
import btoa from 'btoa';
import ieee754 from 'ieee754';

export var PROPERTY_DATA_ID = 0x01;
export var PROPERTY_TIMESTAMP_ID = 0x02;
export var PROPERTY_FAILURE_ID = 0x03;

export function percentageToDouble(value) {
  return base10ToIeee754Double(value);
}

export function base64ToUint8(base64String) {
  return new Uint8Array(atob(base64String).split('').map(function (c) {
    return c.charCodeAt(0);
  }));
}

export function byteArrayToBase64(byteArray) {
  var bytes = new Uint8Array(byteArray);
  return btoa(String.fromCharCode.apply(null, bytes));
}

export function asciiToUint8(string) {
  return new Uint8Array(string.split('').map(function (c) {
    return c.charCodeAt(0);
  }));
}

export function uint8ArrayToHex(uint8Array) {
  return uint8Array.reduce(function (memo, i) {
    return memo + pad(i.toString(16), 2);
  }, '');
}

export function hexToInt(hex) {
  return parseInt(hex, 16);
}

export function intToHex(int) {
  return int.toString(16);
}

export function intToBinary(int) {
  return int.toString(2);
}

export function uint8toInt8(uint8) {
  return uint8 << 24 >> 24;
}

export function binaryToInt(binary) {
  return parseInt(binary, 2);
}

export function hexToUint8Array(hexString) {
  if (!hexString) {
    return new Uint8Array();
  }

  var byteArray = [];

  for (var i = 0, len = hexString.length; i < len; i += 2) {
    byteArray.push(parseInt(hexString.substr(i, 2), 16));
  }

  return new Uint8Array(byteArray);
}

export function hexToByteArrays(hexString) {
  var uint8Array = hexToUint8Array(hexString);
  var byteArrays = [];

  uint8Array.forEach(function (uint8) {
    byteArrays.push(pad(uint8.toString(2), 8).split('').map(function (byte) {
      return Number(byte);
    }));
  });

  return byteArrays;
}

export function pad(string, width) {
  return string.length >= width ? string : new Array(width - string.length + 1).join('0') + string;
}

export function hexArrayToHex(hexArray) {
  return hexArray.reduce(function (memo, i) {
    return memo + pad(i.toString(16), 2);
  }, '');
}

export function base10ToIeee754(value) {
  var bytes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;

  var ieeeArray = [];
  ieee754.write(ieeeArray, value, 0, false, 23, bytes);
  return ieeeArray;
}

export function base10ToIeee754Double(value) {
  var bytes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;

  var ieeeArray = [];
  ieee754.write(ieeeArray, value, 0, false, 52, bytes);
  return ieeeArray;
}

export function ieee754ToBase10(array) {
  var bytes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;

  return ieee754.read(array, 0, false, 23, bytes);
}

export function ieee754DoubleToBase10(array) {
  var bytes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;

  return ieee754.read(array, 0, false, 52, bytes);
}

export function stringToHex(string) {
  var result = '';
  for (var i = 0; i < string.length; i++) {
    result += string[i].charCodeAt(0).toString(16);
  }
  return result;
}

export function stringToBytes(string) {
  return hexToUint8Array(stringToHex(string));
}

export function intToTwoBytes(int) {
  return hexToUint8Array(pad(intToHex(int), 4));
}

export function dateToBytes(date) {
  return decimalToHexArray(date.getTime());
}

// This also removes null bytes
export function bytesToString(bytes) {
  return Buffer.from(bytes).toString('utf8').replace(/\0/g, '');
}

export function decimalToHexArray(value) {
  var bytes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

  var hex = parseInt(value, 10).toString(16);
  while (hex.length % (bytes * 2) !== 0) {
    hex = '0' + hex;
  }var hexArray = hex.match(/.{1,2}/g);

  return hexArray.map(function (hexItem) {
    return Number('0x' + hexItem);
  });
}

export function utfStringToByteArray(string, minLength) {
  var byteArray = unescape(encodeURIComponent(string)).split('').map(function (char) {
    return char.charCodeAt(0);
  });

  if (minLength !== undefined) {
    while (byteArray.length < minLength) {
      byteArray.unshift(0);
    }
  }

  return byteArray;
}