var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import ChargingResponse from './ChargingResponse';
import ChassisSettingsResponse from './ChassisSettingsResponse';
import ClimateResponse from './ClimateResponse';
import CruiseControlResponse from './CruiseControlResponse';
import DashboardLightsResponse from './DashboardLightsResponse';
import DiagnosticsResponse from './DiagnosticsResponse';
import DoorLocksResponse from './DoorLocksResponse';
import EngineResponse from './EngineResponse';
import EmptyResponse from './EmptyResponse';
import FailureMessageResponse from './FailureMessageResponse';
import FirmwareVersionResponse from './FirmwareVersionResponse';
import FuelingResponse from './FuelingResponse';
import HistoricalResponse from './HistoricalResponse';
import HomeChargerResponse from './HomeChargerResponse';
import HonkHornFlashLightsResponse from './HonkHornFlashLightsResponse';
import HoodResponse from './HoodResponse';
import LightConditionsResponse from './LightConditionsResponse';
import LightsResponse from './LightsResponse';
import MaintenanceResponse from './MaintenanceResponse';
import MobileResponse from './MobileResponse';
import NaviDestinationResponse from './NaviDestinationResponse';
import OffroadResponse from './OffroadResponse';
import ParkingBrakeResponse from './ParkingBrakeResponse';
import ParkingTicketResponse from './ParkingTicketResponse';
import PowerTakeOffResponse from './PowerTakeOffResponse';
import RaceResponse from './RaceResponse';
import RooftopControlResponse from './RooftopControlResponse';
import SeatsResponse from './SeatsResponse';
import StartStopResponse from './StartStopResponse';
import TachographResponse from './TachographResponse';
import TheftAlarmResponse from './TheftAlarmResponse';
import UsageResponse from './UsageResponse';
import TrunkAccessResponse from './TrunkAccessResponse';
import ValetModeResponse from './ValetModeResponse';
import VehicleLocationResponse from './VehicleLocationResponse';
import VehicleTimeResponse from './VehicleTimeResponse';
import WeatherConditionsResponse from './WeatherConditionsResponse';
import WiFiResponse from './WiFiResponse';
import WindowsResponse from './WindowsResponse';
import WindscreenResponse from './WindscreenResponse';
import CapabilitiesResponse from './CapabilitiesResponse';
import VehicleStatusResponse from './VehicleStatusResponse';

var Response = function () {
  function Response(data) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Response);

    this.parse = function () {
      var parsedValue = null;

      return function parse() {
        if (parsedValue !== null) return parsedValue;

        var bytes = this.bytes();
        var Parser = this.findParser(bytes);

        if (!Parser) {
          if (bytes.length === 0) return new EmptyResponse();
          return bytes;
        }

        parsedValue = new Parser(bytes, this.config);
        return parsedValue;
      };
    }();

    this.rawData = data;
    this.config = config;

    this.checkRawDataLength();

    this.parsers = [CapabilitiesResponse, ChargingResponse, ChassisSettingsResponse, ClimateResponse, CruiseControlResponse, DashboardLightsResponse, DiagnosticsResponse, DoorLocksResponse, EngineResponse, FailureMessageResponse, FirmwareVersionResponse, FuelingResponse, HistoricalResponse, HomeChargerResponse, HonkHornFlashLightsResponse, HoodResponse, LightConditionsResponse, LightsResponse, MaintenanceResponse, MobileResponse, NaviDestinationResponse, OffroadResponse, ParkingBrakeResponse, ParkingTicketResponse, PowerTakeOffResponse, RaceResponse, RooftopControlResponse, SeatsResponse, StartStopResponse, TachographResponse, TheftAlarmResponse, UsageResponse, TrunkAccessResponse, ValetModeResponse, VehicleLocationResponse, VehicleStatusResponse, VehicleTimeResponse, WeatherConditionsResponse, WiFiResponse, WindowsResponse, WindscreenResponse];
  }

  _createClass(Response, [{
    key: 'checkRawDataLength',
    value: function checkRawDataLength() {
      if (this.rawData.length < 2 && this.rawData.length !== 0) {
        throw new Error('Response string length invalid (length: ' + this.rawData.length + ' chars).');
      }
    }
  }, {
    key: 'bytes',
    value: function bytes() {
      return this.rawData;
    }
  }, {
    key: 'findParser',
    value: function findParser(bytes) {
      if (bytes.length === 0) {
        return null;
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.parsers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var parser = _step.value;

          if (parser.identifier[0] === bytes[0] && parser.identifier[1] === bytes[1]) {
            return parser;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return null;
    }
  }]);

  return Response;
}();

export default Response;