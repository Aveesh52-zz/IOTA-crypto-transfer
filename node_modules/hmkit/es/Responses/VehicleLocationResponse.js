function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import PropertyResponse from '../PropertyResponse';
import PropertyDecoder from '../PropertyDecoder';
import { coordinatesDecoder, getRoundedIeee754DoubleToBase10 } from '../helpers';

var VehicleLocationResponse = function (_PropertyResponse) {
  _inherits(VehicleLocationResponse, _PropertyResponse);

  /**
   * @property {Object} coordinates (object) Coordinates ({ latitude: (double), longitude: (double) })
   * @property {Number} heading (number) Heading in 8-bytes per IEEE 754
   * @property {Number} altitude (number) Altitude in meters above the WGS 84 reference ellipsoid
   *
   * @example VehicleLocationResponse
    {
      coordinates: {
        value: {
          latitude: 52.516506,
          longitude: 13.381815,
        },
      },
      heading: { value: 52.520008 },
      altitude: { value: 133.5 },
    }
   */
  function VehicleLocationResponse(data, config) {
    _classCallCheck(this, VehicleLocationResponse);

    var _this = _possibleConstructorReturn(this, (VehicleLocationResponse.__proto__ || Object.getPrototypeOf(VehicleLocationResponse)).call(this));

    var properties = [new PropertyDecoder(0x04, 'coordinates').setDecoder(coordinatesDecoder), new PropertyDecoder(0x05, 'heading').setDecoder(function (bytes) {
      return getRoundedIeee754DoubleToBase10(6)(bytes, 8);
    }), new PropertyDecoder(0x06, 'altitude').setDecoder(function (bytes) {
      return getRoundedIeee754DoubleToBase10(6)(bytes, 8);
    })];

    _this.parse(data, properties, config);
    return _this;
  }

  return VehicleLocationResponse;
}(PropertyResponse);

VehicleLocationResponse.identifier = [0x00, 0x30];
export default VehicleLocationResponse;