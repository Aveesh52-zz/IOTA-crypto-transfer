function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import PropertyResponse from '../PropertyResponse';
import PropertyDecoder from '../PropertyDecoder';
import { bytesToString } from '../encoding';
import { switchDecoder, timestampDecoder } from '../helpers';

var ParkingTicketResponse = function (_PropertyResponse) {
  _inherits(ParkingTicketResponse, _PropertyResponse);

  /**
   * @property {String} state (string) Parking Ticket state
   * @property {String} operatorName (string) Operator name bytes formatted in UTF-8
   * @property {String} operatorTicketID (string) Operator ticket id
   * @property {Date} startDate (date) Parking ticket start time
   * @property {Date} endDate (date) Parking ticket end time
   *
   * @example ParkingTicketResponse
    {
      parkingTicketState: {
        value: 'ended',
      },
      operatorName: {
        value: 'Berlin Parking',
      },
      operatorTicketID: {
        value: '64894233',
      },
      ticketStartTime: {
        value: '2018-04-12T23:20:50.000Z',
      },
      ticketEndTime: {
        value: '2019-03-04T09:25:58.360Z',
      },
    }
   */
  function ParkingTicketResponse(data, config) {
    _classCallCheck(this, ParkingTicketResponse);

    var _this = _possibleConstructorReturn(this, (ParkingTicketResponse.__proto__ || Object.getPrototypeOf(ParkingTicketResponse)).call(this));

    var properties = [new PropertyDecoder(0x01, 'parkingTicketState').setDecoder(switchDecoder({
      0x00: 'ended',
      0x01: 'started'
    })), new PropertyDecoder(0x02, 'operatorName').setDecoder(bytesToString), new PropertyDecoder(0x03, 'operatorTicketID').setDecoder(bytesToString), new PropertyDecoder(0x04, 'ticketStartTime').setDecoder(timestampDecoder), new PropertyDecoder(0x05, 'ticketEndTime').setDecoder(timestampDecoder)];

    _this.parse(data, properties, config);
    return _this;
  }

  return ParkingTicketResponse;
}(PropertyResponse);

ParkingTicketResponse.identifier = [0x00, 0x47];
export default ParkingTicketResponse;