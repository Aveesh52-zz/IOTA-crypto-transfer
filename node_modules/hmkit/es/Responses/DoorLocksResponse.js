var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import PropertyResponse from '../PropertyResponse';
import PropertyDecoder from '../PropertyDecoder';
import OptionalPropertyDecoder from '../OptionalPropertyDecoder';
import { switchDecoder } from '../helpers';

var DoorLocksResponse = function (_PropertyResponse) {
  _inherits(DoorLocksResponse, _PropertyResponse);

  /**
   * @property {Array} insideLocks (array) Inside door locks ([{ doorLocation: (string 'front_left|front_right|rear_right|rear_left|all'), lockState: (string 'unlocked|locked') }])
   * @property {Array} locks (array) Door locks ([{ doorLocation: (string 'front_left|front_right|rear_right|rear_left|all'), lockState: (string 'unlocked|locked') }])
   * @property {Array} positions (Array { doorLocation: (string 'front_left|front_right|rear_right|rear_left|all'), position: (string 'open|closed')}`) Positions
   *
   * @example DoorLocksResponse
    {
      insideLocks: [{
        value: {
          doorLocation: 'front_left',
          lockState: 'locked',
        },
      }, {
        value: {
          doorLocation: 'front_right',
          lockState: 'locked',
        },
      }, {
        value: {
          doorLocation: 'rear_right',
          lockState: 'locked',
        },
      }, {
        value: {
          doorLocation: 'rear_left',
          lockState: 'locked',
        },
      }, {
        value: {
          doorLocation: 'all',
          lockState: 'locked',
        },
      }],
      locks: [{
        value: {
          doorLocation: 'front_left',
          lockState: 'locked',
        },
      }, {
        value: {
          doorLocation: 'front_right',
          lockState: 'locked',
        },
      }, {
        value: {
          doorLocation: 'rear_right',
          lockState: 'locked',
        },
      }, {
        value: {
          doorLocation: 'rear_left',
          lockState: 'locked',
        },
      }, {
        value: {
          doorLocation: 'all',
          lockState: 'locked',
        },
      }],
      positions: [{
        value: {
          doorLocation: 'front_left',
          position: 'closed',
        },
      }, {
        value: {
          doorLocation: 'front_right',
          position: 'closed',
        },
      }, {
        value: {
          doorLocation: 'rear_right',
          position: 'closed',
        },
      }, {
        value: {
          doorLocation: 'rear_left',
          position: 'closed',
        },
      }, {
        value: {
          doorLocation: 'all',
          position: 'closed',
        },
      }],
    }
   */
  function DoorLocksResponse(data, config) {
    _classCallCheck(this, DoorLocksResponse);

    /* prettier-ignore */
    var _this = _possibleConstructorReturn(this, (DoorLocksResponse.__proto__ || Object.getPrototypeOf(DoorLocksResponse)).call(this));

    var properties = [new PropertyDecoder(0x02, 'insideLocks').setOptionalSubProperties('doorLocation', [new OptionalPropertyDecoder(0x00, 'front_left').setDecoder(_this.lockDecoder), new OptionalPropertyDecoder(0x01, 'front_right').setDecoder(_this.lockDecoder), new OptionalPropertyDecoder(0x02, 'rear_right').setDecoder(_this.lockDecoder), new OptionalPropertyDecoder(0x03, 'rear_left').setDecoder(_this.lockDecoder), new OptionalPropertyDecoder(0x05, 'all').setDecoder(_this.lockDecoder)]), new PropertyDecoder(0x03, 'locks').setOptionalSubProperties('doorLocation', [new OptionalPropertyDecoder(0x00, 'front_left').setDecoder(_this.lockDecoder), new OptionalPropertyDecoder(0x01, 'front_right').setDecoder(_this.lockDecoder), new OptionalPropertyDecoder(0x02, 'rear_right').setDecoder(_this.lockDecoder), new OptionalPropertyDecoder(0x03, 'rear_left').setDecoder(_this.lockDecoder), new OptionalPropertyDecoder(0x05, 'all').setDecoder(_this.lockDecoder)]), new PropertyDecoder(0x04, 'positions').setOptionalSubProperties('doorLocation', [new OptionalPropertyDecoder(0x00, 'front_left').setDecoder(_this.positionDecoder), new OptionalPropertyDecoder(0x01, 'front_right').setDecoder(_this.positionDecoder), new OptionalPropertyDecoder(0x02, 'rear_right').setDecoder(_this.positionDecoder), new OptionalPropertyDecoder(0x03, 'rear_left').setDecoder(_this.positionDecoder), new OptionalPropertyDecoder(0x05, 'all').setDecoder(_this.positionDecoder)])];
    /* prettier-ignore-end */

    _this.parse(data, properties, config);
    return _this;
  }

  _createClass(DoorLocksResponse, [{
    key: 'positionDecoder',
    value: function positionDecoder(data) {
      return {
        position: switchDecoder({
          0x00: 'closed',
          0x01: 'open'
        })(data)
      };
    }
  }, {
    key: 'lockDecoder',
    value: function lockDecoder(data) {
      return {
        lockState: switchDecoder({
          0x00: 'unlocked',
          0x01: 'locked'
        })(data)
      };
    }
  }]);

  return DoorLocksResponse;
}(PropertyResponse);

DoorLocksResponse.identifier = [0x00, 0x20];
export default DoorLocksResponse;