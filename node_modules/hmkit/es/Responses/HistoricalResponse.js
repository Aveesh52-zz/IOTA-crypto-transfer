var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable no-useless-computed-key */
import PropertyResponse from '../PropertyResponse';
import Response from './Response';
import CapabilityPropertyDecoder from '../CapabilityPropertyDecoder';
import OptionalPropertyDecoder from '../OptionalPropertyDecoder';
import CAPABILITY_IDENTIFIERS from '../CAPABILITY_IDENTIFIERS';

var HistoricalResponse = function (_PropertyResponse) {
  _inherits(HistoricalResponse, _PropertyResponse);

  /**
   * @property {Object} states (array) Capability states ([{ capabilityIdentifier: (string), date: (date), state: (object) }])
   *
   * @example HistoricalResponse
    {
      states: [
        {
          capabilityIdentifier: 'trunk',
          date: 2018-02-14T18:30:01.000Z,
          state: {
            trunkLock: {
              value: 'unlocked'
            },
            trunkPosition: {
              value: 'open'
            },
          }
        }
      ]
    }
   */

  function HistoricalResponse(data, config) {
    _classCallCheck(this, HistoricalResponse);

    var _this = _possibleConstructorReturn(this, (HistoricalResponse.__proto__ || Object.getPrototypeOf(HistoricalResponse)).call(this));

    var properties = [new CapabilityPropertyDecoder(0x01, 'states').setOptionalSubProperties('capabilityIdentifier', Object.entries(CAPABILITY_IDENTIFIERS).map(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          name = _ref2[0],
          identifier = _ref2[1].identifier;

      return new OptionalPropertyDecoder(identifier, name).setDecoder(_this.getCapabilityStateDecoder(identifier));
    }))];

    _this.parse(data, properties, config);
    return _this;
  }

  _createClass(HistoricalResponse, [{
    key: 'getCapabilityStateDecoder',
    value: function getCapabilityStateDecoder(identifier) {
      return function (bytes) {
        var response = new Response([].concat(_toConsumableArray(identifier), _toConsumableArray(bytes)), {
          withUniversalProperties: true
        }).parse();

        var date = response.date.data;
        delete response.date;

        return {
          state: response,
          date: date
        };
      };
    }
  }]);

  return HistoricalResponse;
}(PropertyResponse);

HistoricalResponse.identifier = [0x00, 0x12];
export default HistoricalResponse;