function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import PropertyResponse from '../PropertyResponse';
import PropertyDecoder from '../PropertyDecoder';
import { switchDecoder, bytesSum } from '../helpers';

var CruiseControlResponse = function (_PropertyResponse) {
  _inherits(CruiseControlResponse, _PropertyResponse);

  /**
   * @property {String} cruiseControl (string) Cruise control state
   * @property {String} limiter (string) Limiter state
   * @property {Number} targetSpeed The target speed in km/h
   * @property {String} acc (string) Adaptive Cruise Control state
   * @property {Number} accTargetSpeed (string) The target speed in km/h of the Adaptive Cruise Control
   *
   * @example CruiseControlResponse
    {
      cruiseControl: { value: 'active' },
      limiter: { value: 'not_set' },
      targetSpeed: { value: 90 },
      acc: { value: 'inactive' },
      accTargetSpeed: { value: 0 },
    }
   */
  function CruiseControlResponse(data, config) {
    _classCallCheck(this, CruiseControlResponse);

    var _this = _possibleConstructorReturn(this, (CruiseControlResponse.__proto__ || Object.getPrototypeOf(CruiseControlResponse)).call(this));

    var properties = [new PropertyDecoder(0x01, 'cruiseControl').setDecoder(switchDecoder({
      0x00: 'inactive',
      0x01: 'active'
    })), new PropertyDecoder(0x02, 'limiter').setDecoder(switchDecoder({
      0x00: 'not_set',
      0x01: 'higher_speed_requested',
      0x02: 'lower_speed_requested',
      0x03: 'speed_fixed'
    })), new PropertyDecoder(0x03, 'targetSpeed').setDecoder(bytesSum), new PropertyDecoder(0x04, 'acc').setDecoder(switchDecoder({
      0x00: 'inactive',
      0x01: 'active'
    })), new PropertyDecoder(0x05, 'accTargetSpeed').setDecoder(bytesSum)];

    _this.parse(data, properties, config);
    return _this;
  }

  return CruiseControlResponse;
}(PropertyResponse);

CruiseControlResponse.identifier = [0x00, 0x62];
export default CruiseControlResponse;