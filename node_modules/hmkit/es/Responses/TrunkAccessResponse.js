function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import PropertyResponse from '../PropertyResponse';
import PropertyDecoder from '../PropertyDecoder';
import { switchDecoder } from '../helpers';

var TrunkAccessResponse = function (_PropertyResponse) {
  _inherits(TrunkAccessResponse, _PropertyResponse);

  /**
   * @property {String} trunkLock (string 'unlocked|locked') Lock State
   * @property {String} trunkPosition (string 'closed|open') Position State
   *
   * @example TrunkAccessResponse
    {
      trunkLock: { value: 'locked' },
      trunkPosition: { value: 'closed' },
    }
   */
  function TrunkAccessResponse(data, config) {
    _classCallCheck(this, TrunkAccessResponse);

    var _this = _possibleConstructorReturn(this, (TrunkAccessResponse.__proto__ || Object.getPrototypeOf(TrunkAccessResponse)).call(this));

    var properties = [new PropertyDecoder(0x01, 'trunkLock').setDecoder(switchDecoder({
      0x00: 'unlocked',
      0x01: 'locked'
    })), new PropertyDecoder(0x02, 'trunkPosition').setDecoder(switchDecoder({
      0x00: 'closed',
      0x01: 'open'
    }))];

    _this.parse(data, properties, config);
    return _this;
  }

  return TrunkAccessResponse;
}(PropertyResponse);

TrunkAccessResponse.identifier = [0x00, 0x21];
export default TrunkAccessResponse;