var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable no-useless-computed-key */
import PropertyResponse from '../PropertyResponse';
import CapabilityPropertyDecoder from '../CapabilityPropertyDecoder';
import OptionalPropertyDecoder from '../OptionalPropertyDecoder';
import CAPABILITY_IDENTIFIERS from '../CAPABILITY_IDENTIFIERS';

var CapabilitiesResponse = function (_PropertyResponse) {
  _inherits(CapabilitiesResponse, _PropertyResponse);

  /**
   * @property {Array} capabilities (Array) Capabilities ({ capabilityIdentifier: (string 'vehicle_status | parking_ticket | browser | windows | vehicle_time | start_stop | fueling | navi_destination | light_conditions | offroad | trunk | valet_mode | dashboard_lights | text_input | lights | chassis_settings | notifications | charging | home_charger | diagnostics | power_takeoff | wake_up | video_handover | wi_fi | vehicle_location | graphics | race | firmware_version | theft_alarm | seats | tachograph | parking_brake | capabilities | maintenance | rooftop_control | windscreen | cruise_control | honk_horn_flash_lights | engine | weather_conditions | messaging | climate | door_locks'), supportedMessageTypes: (string 'get_vehicle_status | get_parking_ticket | start_parking | end_parking | load_url | get_windows_state | open_close_windows | get_vehicle_time | get_start_stop_state | activate_deactivate_start_stop | get_gas_flap_state | open_gas_flap | get_navi_destination | set_navi_destination | get_light_conditions | get_offroad_state | get_trunk_state | open_close_trunk | get_valet_mode | activate_deactivate_valet_mode | get_dashboard_lights | text_input | get_lights_state | control_lights | get_chassis_settings | set_driving_mode | start_stop_sport_chrono | set_spring_rate | set_chassis_position | notification | clear_notification | get_charge_state | start_stop_charging | set_charge_limit | open_close_charge_port | set_charge_mode | set_charge_timer | get_home_charger_state | set_charge_current | set_price_tariffs | activate_deactivate_solar_charging | enable_disable_wi_fi_hotspot | get_diagnostics_state | get_power_takeoff_state | activate_deactivate_power_takeoff | wake_up | video_handover | get_wi_fi_state | connect_to_network | forget_network | enable_disable_wi_fi | get_vehicle_location | display_image | get_race_state | get_firmware_version | get_theft_alarm_state | set_theft_alarm_state | get_seats_state | get_tachograph_state | get_parking_brake_state | set_parking_brake | get_capabilities | get_capability | get_maintenance_state | get_rooftop_state | control_rooftop | get_windscreen_state | set_windscreen_damage | get_cruise_control_state | activate_deactivate_cruise_control | get_flashers_state | honk_flash | activate_deactivate_emergency_flashers | get_ignition_state | turn_engine_on_off | get_weather_conditions | message_received | get_climate_state | set_climate_profile | start_stop_hvac | start_stop_defogging | start_stop_defrosting | start_stop_ionising | get_lock_state | lock_unlock_doors') })
   *
   * @example CapabilitiesResponse
    {
      capabilities: [
        {
          capabilityIdentifier: 'diagnostics',
          supportedMessageTypes: [
            'get_diagnostics_state',
            'diagnostics_state'
          ]
        },
        {
          capabilityIdentifier: 'maintenance',
          supportedMessageTypes: [
            'get_maintenance_state',
            'maintenance_state'
          ]
        },
        {
          capabilityIdentifier: 'race',
          supportedMessageTypes: [
            'get_race_state',
            'race_state'
          ]
        },
        {
          capabilityIdentifier: 'offroad',
          supportedMessageTypes: [
            'get_offroad_state',
            'offroad_state'
          ]
        },
        {
          capabilityIdentifier: 'door_locks',
          supportedMessageTypes: [
            'get_lock_state',
            'lock_state',
            'lock_unlock_doors'
          ]
        },
        {
          capabilityIdentifier: 'trunk',
          supportedMessageTypes: [
            'get_trunk_state',
            'trunk_state',
            'open_close_trunk'
          ]
        },
        {
          capabilityIdentifier: 'engine',
          supportedMessageTypes: [
            'get_ignition_state',
            'ignition_state',
            'turn_engine_on_off'
          ]
        },
        {
          capabilityIdentifier: 'wake_up',
          supportedMessageTypes: [
            'wake_up'
          ]
        },
        {
          capabilityIdentifier: 'chassis_settings',
          supportedMessageTypes: [
            'get_chassis_settings',
            'chassis_settings',
            'set_driving_mode',
            'start_stop_sport_chrono',
            'set_spring_rate',
            'set_chassis_position'
          ]
        }
      ]
    }
   */
  function CapabilitiesResponse(data, config) {
    _classCallCheck(this, CapabilitiesResponse);

    var _this = _possibleConstructorReturn(this, (CapabilitiesResponse.__proto__ || Object.getPrototypeOf(CapabilitiesResponse)).call(this));

    var properties = [new CapabilityPropertyDecoder(0x01, 'capabilities').setOptionalSubProperties('capabilityIdentifier', Object.entries(CAPABILITY_IDENTIFIERS).map(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          name = _ref2[0],
          identifier = _ref2[1].identifier;

      return new OptionalPropertyDecoder(identifier, name).setDecoder(_this.getCapabilityDecoder(name));
    }))];

    _this.parse(data, properties, config);
    return _this;
  }

  _createClass(CapabilitiesResponse, [{
    key: 'getCapabilityDecoder',
    value: function getCapabilityDecoder(capability) {
      return function (bytes) {
        return {
          supportedMessageTypes: bytes.map(function (byte) {
            return CAPABILITY_IDENTIFIERS[capability].messages[byte];
          })
        };
      };
    }
  }]);

  return CapabilitiesResponse;
}(PropertyResponse);

CapabilitiesResponse.identifier = [0x00, 0x10];
export default CapabilitiesResponse;