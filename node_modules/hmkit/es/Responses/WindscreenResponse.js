function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import PropertyResponse from '../PropertyResponse';
import PropertyDecoder from '../PropertyDecoder';
import { switchDecoder, matrixZoneDecoder, timestampDecoder, progressDecoder } from '../helpers';

var WindscreenResponse = function (_PropertyResponse) {
  _inherits(WindscreenResponse, _PropertyResponse);

  /**
   * @property {String} wipers (string 'inactive|active|automatic') Wipers state
   * @property {String} wipersIntensity (string 'level_0|level_1|level_2|level_3') Wipers intensity
   * @property {String} windscreenDamage (string 'no_impact_detected | impact_but_no_damage_detected | damage_smaller_than_1_inch | damage_larger_than_1_inch') Windscreen damage
   * @property {Object} windscreenZoneMatrix (object '{rows: (number), columns: (number)}') Windscreen zone matrix
   * @property {Object} windscreenDamageZone (object '{rows: (number), columns: (number)}') Windscreen damage zone
   * @property {String} windscreenNeedsReplacement (string 'unknown|no_replacement_needed|replacement_needed') Windscreen needs replacement
   * @property {Number} windscreenDamageConfidence (number) Windscreen damage confidence
   * @property {Date} windscreenDamageDetectionTime (date) Windscreen damage detection time
   *
   * @example WindscreenResponse
    {
      wipers: { value: 'active' },
      wipersIntensity: { value: 'level_3' },
      windscreenDamage: { value: 'damage_smaller_than_1_inch' },
      windscreenZoneMatrix: {
        value: {
          rows: 3,
          columns: 2,
        },
      },
      windscreenDamageZone: {
        value: {
          rows: 3,
          columns: 3,
        },
      },
      windscreenNeedsReplacement: { value: 'replacement_needed' },
      windscreenDamageConfidence: { value: 0 },
      windscreenDamageDetectionTime: { value: '2000-01-01T00:00:00.000Z' },
    }
   */
  function WindscreenResponse(data, config) {
    _classCallCheck(this, WindscreenResponse);

    var _this = _possibleConstructorReturn(this, (WindscreenResponse.__proto__ || Object.getPrototypeOf(WindscreenResponse)).call(this));

    var properties = [new PropertyDecoder(0x01, 'wipers').setDecoder(switchDecoder({
      0x00: 'inactive',
      0x01: 'active',
      0x02: 'automatic'
    })), new PropertyDecoder(0x02, 'wipersIntensity').setDecoder(switchDecoder({
      0x00: 'level_0',
      0x01: 'level_1',
      0x02: 'level_2',
      0x03: 'level_3'
    })), new PropertyDecoder(0x03, 'windscreenDamage').setDecoder(switchDecoder({
      0x00: 'no_impact_detected',
      0x01: 'impact_but_no_damage_detected',
      0x02: 'damage_smaller_than_1_inch',
      0x03: 'damage_larger_than_1_inch'
    })), new PropertyDecoder(0x04, 'windscreenZoneMatrix').setDecoder(matrixZoneDecoder), new PropertyDecoder(0x05, 'windscreenDamageZone').setDecoder(matrixZoneDecoder), new PropertyDecoder(0x06, 'windscreenNeedsReplacement').setDecoder(switchDecoder({
      0x00: 'unknown',
      0x01: 'no_replacement_needed',
      0x02: 'replacement_needed'
    })), new PropertyDecoder(0x07, 'windscreenDamageConfidence').setDecoder(progressDecoder), new PropertyDecoder(0x08, 'windscreenDamageDetectionTime').setDecoder(timestampDecoder)];

    _this.parse(data, properties, config);
    return _this;
  }

  return WindscreenResponse;
}(PropertyResponse);

WindscreenResponse.identifier = [0x00, 0x42];
export default WindscreenResponse;