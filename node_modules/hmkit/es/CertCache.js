var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import path from 'path';
import fs from 'fs';

import AccessCertificate from './AccessCertificate';
import { base64ToUint8 } from './encoding';

var CACHE_STORE_NAME = 'access_certificates';
var CACHE_TTL = 3600000;
var GC_TICKS = 2000;

var CertCache = function () {
  function CertCache() {
    _classCallCheck(this, CertCache);

    this.cacheTTL = CACHE_TTL;
    this.GCTicks = GC_TICKS;
    this.GCCounter = 0;
  }

  _createClass(CertCache, [{
    key: 'storePath',
    value: function storePath() {
      if (process.env.HM_NODE_SDK_STORAGE_PATH) {
        return path.resolve(process.env.HM_NODE_SDK_STORAGE_PATH, CACHE_STORE_NAME) + '.json';
      }
      return path.resolve(__dirname, '..', 'storage', CACHE_STORE_NAME) + '.json';
    }
  }, {
    key: 'getByVehicleSerial',
    value: function getByVehicleSerial(appId, vehicleSerial) {
      return this.get(function (_ref) {
        var ai = _ref.ai,
            vs = _ref.vs;
        return ai === appId && vs === vehicleSerial;
      });
    }
  }, {
    key: 'getByAccessToken',
    value: function getByAccessToken(appId, accessToken) {
      return this.get(function (_ref2) {
        var ai = _ref2.ai,
            at = _ref2.at;
        return ai === appId && at === accessToken;
      });
    }
  }, {
    key: 'get',
    value: function get(filterFunction) {
      var store = this.getStore();
      var existingItemIndex = store.findIndex(filterFunction);

      if (existingItemIndex < 0) return null;

      var _updateTimestamp = this.updateTimestamp(store, existingItemIndex),
          c = _updateTimestamp.c;

      return new AccessCertificate(base64ToUint8(c));
    }
  }, {
    key: 'updateTimestamp',
    value: function updateTimestamp(store, index) {
      this.GCCounter++;

      var _store$index = store[index],
          ai = _store$index.ai,
          vs = _store$index.vs,
          at = _store$index.at,
          c = _store$index.c;

      var newStore = [].concat(_toConsumableArray(store));
      var newItem = this.createCacheObject(ai, vs, at, c);
      newStore.splice(index, 1, newItem);

      this.setStore(newStore);
      this.tryCacheGC();

      return newItem;
    }
  }, {
    key: 'set',
    value: function set(appId, vehicleSerial, accessToken, base64Cert) {
      this.GCCounter++;

      var store = this.getStore();

      this.setStore([].concat(_toConsumableArray(store), [this.createCacheObject(appId, vehicleSerial, accessToken, base64Cert)]));

      this.tryCacheGC();
    }
  }, {
    key: 'createCacheObject',
    value: function createCacheObject(appId, vehicleSerial, accessToken, base64Cert) {
      return {
        ai: appId,
        vs: vehicleSerial,
        at: accessToken,
        c: base64Cert,
        t: Date.now()
      };
    }
  }, {
    key: 'tryCacheGC',
    value: function tryCacheGC() {
      var _this = this;

      if (this.GCCounter >= this.GCTicks) {
        var currentTimestamp = Date.now();

        this.setStore(this.getStore().filter(function (_ref3) {
          var t = _ref3.t;
          return t + _this.cacheTTL > currentTimestamp;
        }));
        this.GCCounter = 0;
      }
    }
  }, {
    key: 'getStore',
    value: function getStore() {
      if (!fs.existsSync(this.storePath())) {
        return [];
      }

      var storeContents = fs.readFileSync(this.storePath(), 'utf8');

      try {
        var store = JSON.parse(storeContents);
        return Array.isArray(store) ? store : [];
      } catch (e) {
        throw new Error('Invalid json in file "' + this.storePath() + '"');
      }
    }
  }, {
    key: 'setStore',
    value: function setStore(data) {
      fs.writeFileSync(this.storePath(), JSON.stringify(data, null, 2));
    }
  }, {
    key: 'setRawStore',
    value: function setRawStore(data) {
      fs.writeFileSync(this.storePath(), data);
    }
  }, {
    key: 'setCacheTTL',
    value: function setCacheTTL(cacheTTL) {
      this.cacheTTL = cacheTTL;
      return this;
    }
  }, {
    key: 'setGcTicks',
    value: function setGcTicks(GCTicks) {
      this.GCTicks = GCTicks;
      return this;
    }
  }, {
    key: 'resetGcCounter',
    value: function resetGcCounter() {
      this.GCCounter = 0;
      return this;
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      if (!fs.existsSync(this.storePath())) return;
      fs.unlinkSync(this.storePath());
    }
  }]);

  return CertCache;
}();

export default new CertCache();